MAP: D:\Projects\serbizyu
--app/Domains/Common/Http/Controllers/AddressController.php
<?php

namespace App\Domains\Common\Http\Controllers;

use App\Domains\Common\Models\Address;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class AddressController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(Address $address)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Address $address)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Address $address)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Address $address)
    {
        //
    }
}
----
--app/Domains/Common/Models/Address.php
<?php

namespace App\Domains\Common\Models;

use Illuminate\Database\Eloquent\Model;

class Address extends Model
{
     protected $fillable = [
        'id',
        'house_no',
        'street',
        'barangay',
        'town',
        'province',
        'country',
        'lat',
        'lng',
    ];

}
----
--app/Domains/Common/Models/UserAddress.php
<?php

namespace App\Domains\Common\Models;

use Illuminate\Database\Eloquent\Model;
use \App\Domains\Users\Models\User;
use \App\Domains\Common\Models\Address;

class UserAddress extends Model
{
     protected $fillable = [
        'user_id',
        'address_id',
        'is_primary',
    ];

    public function address()
    {
        return $this->belongsTo(Address::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

}
----
--app/Domains/Common/Services/AddressService.php
<?php

namespace App\Domains\Common\Services;

use App\Domains\Common\Models\Category;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use Illuminate\Database\Eloquent\Collection;
use App\Domains\Common\Models\Address;

class AddressService
{
    
    public function getAllAddresses(): Collection
    {
        $addresses = Address::all();

        if ($addresses->isEmpty()) {
            throw new ResourceNotFoundException('No addresses found.');
        }

        if ($addresses->every->trashed()) {
            throw new ResourceNotFoundException('Addresses have all been deleted.');
        }

        return $addresses;
    }

    public function getAddress(int $id): Address
    {
        $address = Address::find($id);

        if ($address == null) {
            throw new ResourceNotFoundException('Address not found');
        }
        if($address->trashed())
        {
            throw new ResourceNotFoundException('Address does not exist.');
        }
        return $address;
    }
}
----
--app/Domains/Listings/Http/Controllers/ListingController.php
<?php

namespace App\Domains\Listings\Http\Controllers;

use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Listings\Models\Service;
use App\Domains\Listings\Services\ServiceService;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class ListingController extends Controller
{

    public function __construct()
    {
    }
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $services = app(ServiceService::class)->getAllServices();
        $openOffers = app(OpenOffer::class)->getOpenOffers();
        // concatenate models
        $listings = $services->concat($openOffers);
        return view('browse', compact('listings'));
    }


}
----
--app/Domains/Listings/Http/Controllers/ServiceController.php
<?php

namespace App\Domains\Listings\Http\Controllers;

use App\Domains\Listings\Models\Service;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class ServiceController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    // public function index()
    // {
    //     //
    // }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        //
    }

    /**
     * Display the specified resource.
     */
    public function show(Service $service)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Service $service)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, Service $service)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Service $service)
    {
        //
    }
}
----
--app/Domains/Listings/Models/Category.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Domains\Listings\Models\Service;


class Category extends Model
{
    use hasFactory, SoftDeletes;

    protected $table = 'categories';
    protected $fillable = ['name'];

    public function services()
    {
        return $this->belongsToMany(Service::class);
    }

    public function openOffers()
    {
        return $this->belongsToMany(OpenOffer::class);
    }

    protected static function newFactory()
    {
        return \Database\Factories\CategoryFactory::new();
    }
}
----
--app/Domains/Listings/Models/ListingImage.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use App\Domains\Listings\Models\WorkflowTemplate;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Domains\Listings\Models\WorkCatalog;

class ListingImage extends Model
{
    use HasFactory;

    protected $fillable = [
        'path',
        'thumbnail_path',
        'alt_text',
        'order_index',
        'is_primary',
    ];

    protected $casts = [
        'is_primary' => 'boolean',
    ];

    public function imageable()
    {
        return $this->morphTo();
    }

    // Optional helper for generating URLs if using storage
    public function getUrlAttribute()
    {
        return asset('storage/' . $this->path);
    }

    public function getThumbnailUrlAttribute()
    {
        return asset('storage/' . $this->thumbnail_path);
    }

    public function listing()
    {
        return $this->morphTo();
    }
}
----
--app/Domains/Listings/Models/OpenOffer.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use App\Domains\Users\Models\User;
use App\Domains\Listings\Models\Category;
use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Common\Models\Address;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;

class OpenOffer extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $table = 'open_offers';
    
    protected $fillable = ['title', 'description', 'budget', 'pay_first', 'fulfilled' ,'category_id', 'creator_id', 'workflow_template_id', 'address_id'];

    // casts
    protected $casts = [
        'fulfilled' => 'boolean',
    ];

    public function images()
    {
        return $this->morphMany(ListingImage::class, 'imageable');
    }

    public function thumbnail()
    {
        $primaryImage = $this->morphOne(ListingImage::class, 'imageable')
            ->where('is_primary', true)
            ->select(['id', 'path', 'imageable_id', 'imageable_type']); // minimal columns
        
        if ($primaryImage->doesntExist()) {
            // Fallback to the first image if no primary is set
            $primaryImage = $this->morphOne(ListingImage::class, 'imageable')
                ->select(['id', 'path', 'imageable_id', 'imageable_type'])
                ->orderBy('order_index', 'asc');
        }
        return $primaryImage;    
    }



    public function category()
    {
        return $this->belongsTo(Category::class);
    }


    public function creator()
    {
        return $this->belongsTo(User::class);
    }
    

    public function workflowTemplate()
    {
        return $this->belongsTo(WorkflowTemplate::class);
    }

    public function bids()
    
    {
        return $this->hasMany(OpenOfferBid::class);
    }


    protected static function newFactory()
    {
        return \Database\Factories\OpenOfferFactory::new();
    }

    protected function address()
    {
        return $this->belongsTo(Address::class);
    }
}
----
--app/Domains/Listings/Models/OpenOfferBid.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Domains\Listings\Models\Service;


class OpenOfferBid extends Model
{
    use hasFactory, SoftDeletes;

    protected $table = 'open_offer_bids';
    protected $fillable = [
        'open_offer_id',
        'bidder_id',
        'service_id',
        'proposed_price',
        'accepted'
    ];
    

    public function service()
    {
        return $this->belongsToOne(Service::class);
    }

    public function openOffer()
    {
        return $this->belongsToOne(OpenOffer::class);
    }

    protected static function newFactory()
    {
        return \Database\Factories\OpenOfferBidFactory::new();
    }
}
----
--app/Domains/Listings/Models/Service.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use App\Domains\Users\Models\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Domains\Common\Models\Address;

class Service extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $table = 'services';
    protected $fillable = ['title', 'description', 'price', 'pay_first', 'category_id', 'creator_id', 'workflow_template_id', 'address_id'];
    protected $casts = [
        'pay_first' => 'boolean',
    ];

    // morph many images
    public function images()
    {
        return $this->morphMany(ListingImage::class, 'imageable');
    }
    public function thumbnail()
    {
        $primaryImage = $this->morphOne(ListingImage::class, 'imageable')
            ->where('is_primary', true)
            ->select(['id', 'path', 'imageable_id', 'imageable_type']); // minimal columns
        
        if ($primaryImage->doesntExist()) {
            // Fallback to the first image if no primary is set
            $primaryImage = $this->morphOne(ListingImage::class, 'imageable')
                ->select(['id', 'path', 'imageable_id', 'imageable_type'])
                ->orderBy('order_index', 'asc');
        }
        return $primaryImage;    
    }


    public function category()
    {
        return $this->belongsTo(Category::class);
    }

    public function creator()
    {
        return $this->belongsTo(User::class);
    }

    public function workflowTemplate()
    {
        return $this->belongsTo(WorkflowTemplate::class);
    }

    public function address()
    {
        return $this->belongsTo(Address::class);
    }

    protected static function newFactory()
    {
        return \Database\Factories\ServiceFactory::new();
    }
}
----
--app/Domains/Listings/Models/WorkCatalog.php
<?php

namespace App\Domains\Listings\Models;
use App\Domains\Listings\Models\WorkTemplate;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class WorkCatalog extends Model
{
    use HasFactory;

    protected $fillable = [
        'name', 'description', 'default_config'
    ];

    protected $casts = [
        'default_config' => 'array',
    ];

    public function workTemplates()
    {
        return $this->hasMany(WorkTemplate::class);
    }
}
----
--app/Domains/Listings/Models/WorkTemplate.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use App\Domains\Listings\Models\WorkflowTemplate;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use App\Domains\Listings\Models\WorkCatalog;

class WorkTemplate extends Model
{
    use HasFactory;
    protected $fillable = [
            'workflow_template_id',
            'work_catalog_id',
            'order_index',
            'custom_label',
            'custom_config',
        ];

    protected $casts = [
        'custom_config' => 'array',
    ];

    public function workflowTemplate()
    {
        return $this->belongsTo(WorkflowTemplate::class);
    }
    public function workCatalog()
    {
        return $this->belongsTo(WorkCatalog::class);
    }
}
----
--app/Domains/Listings/Models/WorkflowTemplate.php
<?php

namespace App\Domains\Listings\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Domains\Users\Models\User;

class WorkflowTemplate extends Model
{
    use hasFactory, SoftDeletes;

    protected $fillable = ['title', 'description, creator_id', 'is_public'];

    // casts
    protected $casts = [
        'is_public' => 'boolean',
    ];

    public function creator()
    {
        return $this->belongsTo(User::class);
    }


    public function services()
    {
        return $this->belongsToMany(Service::class);
    }

    public function workTemplates()
    {
        return $this->hasMany(WorkTemplate::class);
    }

    protected static function newFactory()
    {
        return \Database\Factories\WorkflowTemplateFactory::new();
    }

}
----
--app/Domains/Listings/Services/CategoryService.php
<?php

namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\Category;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use Illuminate\Database\Eloquent\Collection;

class CategoryService
{
    public function getAllCategories(): Collection
    {
        $categories = Category::all();

        if ($categories->isEmpty()) {
            throw new ResourceNotFoundException('No categories found.');
        }

        if ($categories->every->trashed()) {
            throw new ResourceNotFoundException('Categories have all been deleted.');
        }

        return $categories;
    }

    public function getCategory(int $id)
    {
        $category = Category::find($id);

        if ($category == null) {
            throw new ResourceNotFoundException('Category not found');
        }
        if($category->trashed())
        {
            throw new ResourceNotFoundException('Category does not exist.');
        }
        return $category;
    }
}
----
--app/Domains/Listings/Services/ListingImageService.php
<?php
namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\ListingImage;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Storage; 

class ListingImageService
{
    public function attachToModel(Model $model, $file)
    {
        // Step 1: Upload image
        $path = $file->store('uploads/services', 'public');

        // Step 2: Create image record and attach morphically
        return $model->images()->create([
            'path' => $path,
            'alt_text' => $file->getClientOriginalName(),
            'is_primary' => false,
        ]);
    }

    // Optional helper for direct create (not attached)
    public function createListingImage($file): ListingImage
    {
        $path = $file->store('uploads/temp', 'public');
        return ListingImage::create(['path' => $path]);
    }
}


?>
----
--app/Domains/Listings/Services/OpenOfferBidService.php
<?php
namespace App\Domains\Listings\Services;

use App\Domains\Users\Services\UserService;
use App\Domains\Listings\Models\OpenOfferBid;
use App\Exceptions\AuthorizationException;
use App\Exceptions\BusinessRuleException;
use App\Exceptions\ResourceNotFoundException;
use Illuminate\Database\Eloquent\Collection;

class OpenOfferBidService
{


    public function __construct(
        private UserService $userService,
        private OpenOfferService $openOfferService,
        private ServiceService $serviceService
    ){}



    public function placeBid($data) : OpenOfferBid {

        $this->openOfferService->getOpenOffer($data['open_offer_id']);
        $this->userService->getUser($data['bidder_id']);
        $service = $this->serviceService->getService($data['service_id']);

        if($service -> creator_id != $data['bidder_id']) {
            throw new AuthorizationException('Bidder must be the creator of the service.');
        }

        if ($data['proposed_price'] <= 0) {
            throw new BusinessRuleException('Price must be greater than 0.');
        }

        return OpenOfferBid::create($data);
    }

    public function getOpenOfferBid($id) : OpenOfferBid {
        $bid = OpenOfferBid::where('open_offer_id', $id)->get();

        if ($bid == null) {
            throw new ResourceNotFoundException('Bid does not exist.');
        }

        if ($bid->trashed()) {
            throw new ResourceNotFoundException('Bid has been deleted.');
        }

        return $bid;
    }

    // all open offerse
    public function getAllOpenOfferBids() : Collection {

        $bids = OpenOfferBid::all();

        if ($bids->isEmpty()) {
            throw new ResourceNotFoundException('No bids found.');
        }

        if ($bids->every->trashed()) {
            throw new ResourceNotFoundException('Bids have all been deleted.');
        }
        
        return $bids;
    }

    public function rejectBid($id) : OpenOfferBid 
    {
        $bid = $this->getOpenOfferBid($id);
        return $bid; 
    }

    
}
----
--app/Domains/Listings/Services/OpenOfferService.php
<?php
namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Listings\Services\WorkflowTemplateService;
use App\Domains\Listings\Services\CategoryService;
use App\Domains\Users\Services\UserService;
use App\Domains\Common\Services\AddressService;

use App\Exceptions\AuthorizationException;
use App\Exceptions\BusinessRuleException;
use App\Exceptions\ResourceNotFoundException;
use Illuminate\Database\Eloquent\Collection;

class OpenOfferService
{

    public function __construct(
        private UserService $userService,
        private CategoryService $categoryService,
        private WorkflowTemplateService $workflowTemplateService
    ){}


        /**
         * Creates a new OpenOffer.
         *
         * @param array $data The data to be used when creating the OpenOffer.
         * @return OpenOffer The newly created OpenOffer.
         * @throws BusinessRuleException If the price is less than or equal to 0.
         * @throws AuthorizationException If the workflow does not belong to the creator or the user is not a creator.
         * @throws ResourceNotFoundException If the category or workflow template does not exist or has been deleted.
         */
    public function createOpenOffer($data): OpenOffer
    {
        if ($data['price'] <= 0) {
            throw new BusinessRuleException('Price must be greater than 0.');
        }

        $this->categoryService->getCategory($data['category_id']);
        
        if (!empty($data['workflow_template_id'])) {
            $workflow = $this->workflowTemplateService->getWorkflowTemplate($data['workflow_template_id']);            

            if (!$workflow->is_public && $workflow->creator_id != $data['creator_id']) 
            {
                throw new AuthorizationException('Workflow does not belong to creator.');
            }
        }

        // set address if not set then get fro mthe address of the user
        $creator = $this->userService->getUser($data['creator_id']);
        if ($creator == null) {
            throw new ResourceNotFoundException('Creator does not exist.');
        }
        if ($creator->trashed()) {
            throw new ResourceNotFoundException('Creator has been deleted.');
        }

        if ($data['address_id']) {
            $address = app(AddressService::class)->getAddress($data['address_id']);
            if ($address == null) {
                throw new ResourceNotFoundException('Address does not exist.');
            }
        } else {
            $address = $creator->addresses()->where('is_primary', true)->first();
            if ($address == null) {
                throw new ResourceNotFoundException('Creator does not have a primary address.');
            }
            $data['address_id'] = $address->id;
        }

        return OpenOffer::create($data);
    }

    /**
     * Retrieves an OpenOffer by its ID.
     *
     * @param int $id The ID of the OpenOffer to retrieve.
     * @return OpenOffer The retrieved OpenOffer.
     * @throws ResourceNotFoundException If the OpenOffer does not exist or has been deleted.
     */
    public function getOpenOffer($id): OpenOffer
    {
        // get an open offer
        $openOffer = OpenOffer::find($id)->with('creator', 'category', 'workflowTemplate.workTemplates', 'address', 'images');
        if ($openOffer == null) {
            throw new ResourceNotFoundException('Open Offer does not exist.');
        }
        
        if ($openOffer->trashed()) {
            throw new ResourceNotFoundException('Open Offer has been deleted.');
        }

        return $openOffer;
    }


/**
 * Retrieves all OpenOffers.
 *
 * @return Collection A collection of all OpenOffers.
 * @throws ResourceNotFoundException If no openOffers are found or if all openOffers have been deleted.
 */
    public function getAllOpenOffers(): Collection
    {
        $openOffers = OpenOffer::with('creator', 'category', 'workflowTemplate.workTemplates', 'address', 'thumbnail')->get();

        if ($openOffers->isEmpty())
        {
            throw new ResourceNotFoundException('No openOffers found.');
        }
        
        if ($openOffers->every->trashed()) 
        {
            throw new ResourceNotFoundException('Open offers have all been deleted.');
        }
        return $openOffers;
    }

    /**
     * Close an open offer by updating its is_closed field to true.
     *
     * @throws ResourceNotFoundException if the open offer does not exist.
     * @throws ResourceNotFoundException if the open offer has been deleted.
     * @throws BusinessRuleException if the open offer is already closed.
     *
     * @param int $id The id of the open offer to close.
     * @return OpenOffer The closed open offer.
     */

    public function closeOpenOffer($id): OpenOffer
    {
        $openOffer = OpenOffer::find($id);
        if ($openOffer == null) {
            throw new ResourceNotFoundException('Open offer does not exist.');
        }
        
        if ($openOffer->trashed()) {
            throw new ResourceNotFoundException('Open offer has been deleted.');
        }
        if ($openOffer->is_closed == true) {
            throw new BusinessRuleException('Open offer is already closed.');
        }

        $openOffer->update(['is_closed' => true]);
        return $openOffer;
    }
    
}
----
--app/Domains/Listings/Services/ServiceService.php
<?php
namespace App\Domains\Listings\Services;
use App\Domains\Users\Services\UserService;
use App\Domains\Listings\Services\CategoryService;
use App\Domains\Listings\Services\WorkflowTemplateService;
use App\Domains\Common\Services\AddressService;

use App\Domains\Listings\Models\Service;

use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use App\Exceptions\BusinessRuleException;
use Illuminate\Database\Eloquent\Collection;

class ServiceService
{

    public function __construct(
        private UserService $userService,
        private CategoryService $categoryService,
        private WorkflowTemplateService $workflowTemplateService,
        private AddressService $addressService,
        private ListingImageService $listingImageService
        ){}
        
    public function createService($data): Service
    {
        if ($data['price'] <= 0) {
            throw new BusinessRuleException('Price must be greater than 0.');
        }

        $category = $this->categoryService->getCategory($data['category_id']);

        $workflow = $this->workflowTemplateService->getWorkflowTemplate($data['workflow_template_id']);
        if (!$workflow->is_public && $workflow->creator() != $data['creator_id']) 
        {
            throw new AuthorizationException('Workflow does not belong to creator.');
        }

        $creator = $this->userService->getUser($data['creator_id']);
        if ($creator == null) {
            throw new ResourceNotFoundException('Creator does not exist.');
        }
        
        if ($creator->trashed()) {
            throw new ResourceNotFoundException('Creator has been deleted.');
        }

        // address
        if ($data['address_id']) {
            $address = $this->addressService->getAddress($data['address_id']);
            if ($address == null) {
                throw new ResourceNotFoundException('Address does not exist.');
            }
        } else {
            $address = $creator->addresses()->where('is_primary', true)->first();
            if ($address == null) {
                throw new ResourceNotFoundException('Creator does not have a primary address.');
            }
            $data['address_id'] = $address->id;
        }

        // Step 1: Create the service record first (without images)
        $service = Service::create(collect($data)->except('images')->toArray());

        // Step 2: Upload and attach images (if any)
        if (!empty($data['images'])) {
            foreach ($data['images'] as $image) {
                $this->listingImageService->attachToModel($service, $image);
            }
        }

        return $service->load('images');
    }


    public function getService($id): Service
    {
        // get a servce
        // include images loaded  
        $service = Service::with('images', 'category', 'creator', 'address', 'workflowTemplate.workTemplates')->find($id);
        if ($service == null) {
            throw new ResourceNotFoundException('Service does not exist.');
        }
        if ($service->trashed()) {
            throw new ResourceNotFoundException('Service has been deleted.');
        }
        return $service;
    }

    public function getAllServices(): Collection
    {
        $services = Service::with('category', 'creator', 'address', 'workflowTemplate.workTemplates', 'thumbnail')->get();

        if ($services->isEmpty()) {
            throw new ResourceNotFoundException('No services found.');
        }

        if ($services->every->trashed()) {
            throw new ResourceNotFoundException('Services have all been deleted.');
        }
        
        return $services;
    }
}
----
--app/Domains/Listings/Services/WorkCatalogService.php
<?php

namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Listings\Models\WorkTemplate;
use App\Domains\Listings\Models\WorkCatalog;
use App\Domains\Users\Services\UserService;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use App\Exceptions\BusinessRuleException;
use Illuminate\Database\Eloquent\Collection;

class WorkCatalogService
{
    public function __construct(
        private CategoryService $categoryService,
        private WorkflowTemplateService $workflowTemplateService
    )
    {

    }
    public function createWorkCatalog(array $data): WorkCatalog
    {
        // check if already exists
        $existingCatalog = WorkCatalog::where('name', $data['name'])->first();
        if ($existingCatalog) {
            throw new BusinessRuleException('Work catalog already exists.');
        }
        return WorkCatalog::create($data);
    }

    public function getWorkCatalog($id): WorkCatalog
    {
        // get a work catalog
        $workCatalog = WorkCatalog::find($id);
        if ($workCatalog == null) {
            throw new ResourceNotFoundException('Work catalog does not exist.');
        }
        return $workCatalog;
    }

    public function getAllWorkCatalogs(): Collection
    {
        $workCatalogs = WorkCatalog::all();

        if ($workCatalogs->isEmpty()) {
            throw new ResourceNotFoundException('No work catalogs found.');
        }
        
        return $workCatalogs;
    }
}   


?>
----
--app/Domains/Listings/Services/WorkTemplateService.php
<?php

namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Listings\Models\WorkTemplate;
use App\Domains\Listings\Models\WorkCatalog;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use Illuminate\Database\Eloquent\Collection;

class WorkTemplateService
{

//    get, getAll, create
    public function getWorkTemplate($id): WorkTemplate
    {
        // get a work template
        $workTemplate = WorkTemplate::find($id);
        if ($workTemplate == null) {
            throw new ResourceNotFoundException('Work template does not exist.');
        }
        return $workTemplate;
    }

    public function getAllWorkTemplates(): Collection
    {
        $workTemplates = WorkTemplate::all();

        if ($workTemplates->isEmpty()) {
            throw new ResourceNotFoundException('No work templates found.');
        }
        
        return $workTemplates;
    }

    public function createWorkTemplate(array $data): WorkTemplate
    {
        // check if work catalog exists
        $workCatalog = WorkCatalog::find($data['work_catalog_id']);
        if ($workCatalog == null) {
            throw new ResourceNotFoundException('Work catalog does not exist.');
        }

        return WorkTemplate::create($data);
    }

   
}

----
--app/Domains/Listings/Services/WorkflowTemplateService.php
<?php

namespace App\Domains\Listings\Services;

use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Listings\Models\WorkTemplate;
use App\Domains\Listings\Models\WorkCatalog;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use Illuminate\Database\Eloquent\Collection;

class WorkflowTemplateService
{

    public function getAllWorkflowTemplates(): Collection
    {
        $workflowTemplates = WorkflowTemplate::all();

        if ($workflowTemplates->isEmpty()) {
            throw new ResourceNotFoundException('No workflow templates found.');
        }

        if ($workflowTemplates->every->trashed()) {
            throw new ResourceNotFoundException('Workflow templates have all been deleted.');
        }
        
        return $workflowTemplates;
    }

    public function getWorkflowTemplate($id): WorkflowTemplate
    {
        // get a workflow template
        $workflowTemplate = WorkflowTemplate::find($id)->with('work');
        if ($workflowTemplate == null) {
            throw new ResourceNotFoundException('Workflow template does not exist.');
        }
        if ($workflowTemplate->trashed()) {
            throw new ResourceNotFoundException('Workflow template has been deleted.');
        }

        if ($workflowTemplate->work == null) {
            throw new ResourceNotFoundException('Associated work template does not exist.');
        }

        return $workflowTemplate;
    }

   
}

----
--app/Domains/Users/Http/Controllers/ProfileController.php
<?php

namespace App\Domains\Users\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Domains\Users\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit')->with('status', 'profile-updated');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/AuthenticatedSessionController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Domains\Users\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.signin');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(route('dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/ConfirmablePasswordController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/EmailVerificationNotificationController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/EmailVerificationPromptController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : view('auth.verify-email');
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/NewPasswordController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Domains\Users\Models\User;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function (User $user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('auth.signin')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/PasswordController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/PasswordResetLinkController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                        ->withErrors(['email' => __($status)]);
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/RegisteredUserController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Domains\Users\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): View
    {
        return view('auth.join');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'firstname' => $request->first_name,
            'lastname' => $request->last_name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('home'));
    }
}
----
--app/Domains/Users/Http/Controllers/Auth/VerifyEmailController.php
<?php

namespace App\Domains\Users\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}
----
--app/Domains/Users/Http/Requests/ProfileUpdateRequest.php
<?php

namespace App\Domains\Users\Http\Requests;

use App\Domains\Users\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}
----
--app/Domains/Users/Http/Requests/Auth/LoginRequest.php
<?php

namespace App\Domains\Users\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}
----
--app/Domains/Users/Models/User.php
<?php

namespace App\Domains\Users\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use App\Domains\Common\Models\Address;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Spatie\Permission\Traits\HasRoles;
use App\Domains\Common\Models\UserAddress;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable, HasRoles;

    protected $guard_name = 'web'; 
    protected $softDeletes = true;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'firstname',
        'lastname',
        'username',
        'phone',
        'address_id',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    // address
    public function addresses()
    {
        return $this->hasMany(UserAddress::class);
    }

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    protected static function newFactory()
    {
        return \Database\Factories\UserFactory::new();
    }

}
----
--app/Domains/Users/Services/UserService.php
<?php

namespace App\Domains\Users\Services;

use App\Domains\Users\Models\User;
use App\Exceptions\ResourceNotFoundException;
use App\Exceptions\AuthorizationException;
use Illuminate\Database\Eloquent\Collection;

class UserService
{
    public function getAllUsers(): Collection
    {
        $users = User::all();

        if($users->isEmpty()) {
            throw new ResourceNotFoundException('No users found.');
        }

        if($users->every->trashed()) {
            throw new ResourceNotFoundException('Users have all been deleted.');
        }

        return $users;
    }

    public function getUser(int $id): User
    {
        $user = User::find($id);

        if(is_null($user)) {
            throw new ResourceNotFoundException('User not found.');
        }

        if($user->trashed()) {
            throw new ResourceNotFoundException('User does not exist.');
        }

        return $user;
    }
}
----
--app/DTO/Dto.php
<?php

namespace App\DTO;
interface Dto
{
    public function toArray();
    public function toJSON();

}
----
--app/DTO/ServiceResponseDto.php
<?php

namespace App\DTO;

use App\DTO\Dto;

class ServiceResponseDto implements Dto
{
    public function __construct(
        protected bool $success = true,
        protected $errors = [],
        protected $warnings = [],
        protected $data = [],
    )
    {}


    public function isSuccess(): bool
    {
        return $this->success;
    }

    public function addErrors(array $errors): void
    {
        $this->errors = array_merge($this->errors, $errors);
    }

    public function getErrors(): array
    {
        return $this->errors;
    }

    public function addWarnings(array $warnings): void
    {
        $this->warnings = array_merge($this->warnings, $warnings);
    }

    public function getWarnings(): array
    {
        return $this->warnings;
    }

    public function toArray(): array
    {
        return [
            'success' => $this->success,
            'errors' => $this->errors,
            'warnings' => $this->warnings,
            'data' => $this->data
        ];
    }


    public function toJSON(): string
    {
        return json_encode($this->toArray());
    }

    // Static factory method
    public static function success($data = []): ServiceResponseDto
    {
        return new static(true, [], [], $data);
    }

    public static function error($errors): ServiceResponseDto
    {
        if (!is_array($errors)) {
            $errors = [$errors];
        }

        return new static(false, $errors);

    }

    public static function warning($warnings): ServiceResponseDto
    {
        if (!is_array($warnings)) {
            $warnings = [$warnings];
        }
        return new static(true, [], $warnings);
    }
    
}
----
--app/Exceptions/AuthorizationException.php
<?php

namespace App\Exceptions;

class AuthorizationException extends DomainException
{
    public function __construct(string $message = "You are not authorized to perform this action.")
    {
        parent::__construct($message, 403); // 403 Forbidden
    }
}
----
--app/Exceptions/BusinessRuleException.php
<?php

namespace App\Exceptions;

class BusinessRuleException extends DomainException
{
    public function __construct(string $message = "Business rule violated")
    {
        parent::__construct($message, 422);
    }
}
----
--app/Exceptions/ConflictException.php
<?php

namespace App\Exceptions;

class ConflictException extends DomainException
{
    public function __construct(string $message = "Conflict with existing resource.")
    {
        parent::__construct($message, 409); // 409 Conflict
    }
}
----
--app/Exceptions/DomainException.php
<?php

namespace App\Exceptions;

use Exception;

abstract class DomainException extends Exception
{
    protected int $status;

    public function __construct(string $message = "", int $status = 400)
    {
        parent::__construct($message);
        $this->status = $status;
    }


    public function getStatus(): int
    {
        return $this->status;
    }
}
----
--app/Exceptions/ExternalServiceException.php
<?php

namespace App\Exceptions;

class ExternalServiceException extends DomainException
{
    public function __construct(string $message = "External service error.")
    {
        parent::__construct($message, 502); // 502 Bad Gateway
    }
}
----
--app/Exceptions/ResourceNotFoundException.php
<?php

namespace App\Exceptions;

class ResourceNotFoundException extends DomainException
{
    public function __construct(string $message = "The requested resource was not found.")
    {
        parent::__construct($message, 404); // 404 Not Found
    }
}
----
--app/Exceptions/ValidationException.php
<?php

namespace App\Exceptions;

class ValidationException extends DomainException
{
    protected array $errors;

    public function __construct(array $errors, string $message = "Validation failed")
    {
        parent::__construct($message, 422);
        $this->errors = $errors;
    }

    /**
     * Returns the validation errors.
     *
     * @return array
     */
    public function getErrors(): array
    {
        return $this->errors;
    }
}
----
--app/Http/Controllers/Controller.php
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}
----
--app/Providers/AppServiceProvider.php
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\View;
use Illuminate\Auth\Middleware\Authenticate;

// Listings Domain Services
use App\Domains\Listings\Services\ServiceService;
use App\Domains\Listings\Services\CategoryService;
use App\Domains\Listings\Services\WorkflowTemplateService;
use App\Domains\Listings\Services\ListingImageService;
use App\Domains\Listings\Services\OpenOfferService;
use App\Domains\Listings\Services\OpenOfferBidService;
use App\Domains\Listings\Services\WorkCatalogService;
use App\Domains\Listings\Services\WorkTemplateService;

// Users Domain Services
use App\Domains\Users\Services\UserService;

// Common Domain Services
use App\Domains\Common\Services\AddressService;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        // Register CategoryService
        $this->app->singleton(CategoryService::class);

        // Register UserService
        $this->app->singleton(UserService::class);

        // Register AddressService
        $this->app->singleton(AddressService::class);

        // Register ListingImageService
        $this->app->singleton(ListingImageService::class);

        // Register WorkflowTemplateService
        $this->app->singleton(WorkflowTemplateService::class);

        // Register WorkCatalogService with dependencies
        $this->app->bind(WorkCatalogService::class, function ($app) {
            return new WorkCatalogService(
                $app->make(CategoryService::class),
                $app->make(WorkflowTemplateService::class)
            );
        });

        // Register WorkTemplateService
        $this->app->singleton(WorkTemplateService::class);

        // Register ServiceService with all dependencies
        $this->app->bind(ServiceService::class, function ($app) {
            return new ServiceService(
                $app->make(UserService::class),
                $app->make(CategoryService::class),
                $app->make(WorkflowTemplateService::class),
                $app->make(AddressService::class),
                $app->make(ListingImageService::class)
            );
        });

        // Register OpenOfferService with dependencies
        $this->app->bind(OpenOfferService::class, function ($app) {
            return new OpenOfferService(
                $app->make(UserService::class),
                $app->make(CategoryService::class),
                $app->make(WorkflowTemplateService::class)
            );
        });

        // Register OpenOfferBidService with dependencies
        $this->app->bind(OpenOfferBidService::class, function ($app) {
            return new OpenOfferBidService(
                $app->make(UserService::class),
                $app->make(OpenOfferService::class),
                $app->make(ServiceService::class)
            );
        });
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        // Set custom unauthenticated redirect globally
        Authenticate::redirectUsing(function ($request) {
            return route('auth.signin');
        });

        // Share authentication data with navbar across all views
        View::composer('layouts.navbar', function ($view) {
            $authProfileData = [
                'greeting' => null,
                'email' => null,
                'img_path' => null,
            ];

            if (auth()->check()) {
                $user = auth()->user();
                $authProfileData = [
                    'greeting' => 'Hi, ' . ($user->firstname ?? 'User') . '!',
                    'email' => $user->email,
                    'img_path' => $user->profile_image_path ?? null,
                ];
            }

            $view->with('authProfileData', $authProfileData);
        });

        // Optional: Share common data with all views
        View::composer('*', function ($view) {
            // You can share global data here if needed
            // For example, site settings, notifications count, etc.
        });
    }
}
----
--app/View/Components/AppLayout.php
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}
----
--app/View/Components/Navbar.php
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;
use App\Domains\Users\Models\User;
use Illuminate\Support\Facades\Auth;

class Navbar extends Component
{
    public array $authProfileData = [];

    public function __construct()
    {
        /** @var User|null $user */
        $user = Auth::user();

        $firstname = $user?->firstname;
        $email     = $user?->email;
        $img_path = $user?->img_path;

        $this->authProfileData = [
            'email'     => $email,
            'greeting'  => $this->makeGreeting($firstname),
            'img_path' => $img_path
        ];
    }

    private function makeGreeting(?string $user_name = null): string
    {
        $startPhrases = collect(['Hi', 'Hello', 'Welcome']);
        $phrase = $startPhrases->random();

        return $phrase . ', ' . ($user_name ?: 'Guest');
    }

    public function render(): View
    {
        return view('layouts.navbar');
    }
}
----
--database/.gitignore
--database/database.sqlite
--database/factories/CategoryFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Domains\Listings\Models\Category;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Category>
 */
class CategoryFactory extends Factory
{

    protected $model = Category::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => $this->faker->unique()->randomElement([
                'Web Development',
                'Graphic Design',
                'Marketing',
                'Consulting',
                'Content Writing',
                'Photography',
            ]),
        ];
    }
}
----
--database/factories/OpenOfferBidFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Users\Models\User;
use App\Domains\Listings\Models\Category;
use App\Domains\Listings\Models\Service;


class OpenOfferBidFactory extends Factory
{

    protected $model = OpenOffer::class;    

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            'open_offer_id' => $this->faker->randomElement(OpenOffer::all())->id,
            'bidder_id' => $this->faker->randomElement(User::all())->id,
            'service_id' => $this->faker->randomElement(Service::all())->id,
            'proposed_price' => $this->faker->randomFloat(2, 0, 1000),
        ];
    }
}
----
--database/factories/OpenOfferFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Users\Models\User;
use App\Domains\Listings\Models\Category;
use App\Domains\Listings\Models\WorkflowTemplate;

class OpenOfferFactory extends Factory
{

    protected $model = OpenOffer::class;    

    /**
     * Define the model's default state.
     *
     * @return array
     */
    public function definition()
    {
        return [
            'title' => $this->faker->sentence(3),
            'description' => $this->faker->paragraph(),
            'budget' => $this->faker->randomFloat(2, 10, 100),
            'fulfilled' => $this->faker->boolean(30),
            'pay_first' => $this->faker->boolean(30),
            'category_id' => Category::inRandomOrder()->first()->id,
            'creator_id' => User::inRandomOrder()->first()->id,
            'workflow_template_id' => WorkflowTemplate::inRandomOrder()->first()->id,
        ];
    }
}
----
--database/factories/ServiceFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use App\Domains\Users\Models\User;
use App\Domains\Listings\Models\Service;
use App\Domains\Listings\Models\Category;
use App\Domains\Listings\Models\WorkflowTemplate;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Service>
 */
class ServiceFactory extends Factory

{

    protected $model = Service::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => $this->faker->sentence(3),
            'description' => $this->faker->paragraph(),
            'price' => $this->faker->randomFloat(2, 10, 100),
            'pay_first' => $this->faker->boolean(30),
            'category_id' => Category::inRandomOrder()->first()->id,
            'creator_id' => User::inRandomOrder()->first()->id,
            'workflow_template_id' => WorkflowTemplate::inRandomOrder()->first()->id,
        ];
    }
}
----
--database/factories/UserFactory.php
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use App\Domains\Users\Models\User;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{

    // Current model
    protected $model = User::class;

    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {   
        $firstName = fake()->firstName();
        $lastName = fake()->lastName();
        return [
            'firstname' => $firstName,
            'lastname' => $lastName,
            'email' => $firstName . '_' . $lastName . '@example.com',
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password123'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}
----
--database/factories/WorkflowTemplateFactory.php
<?php

namespace Database\Factories;

use App\Domains\Listings\Models\WorkflowTemplate;
use Illuminate\Database\Eloquent\Factories\Factory;
use App\Domains\Users\Models\User;


/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\WorkflowTemplate>
 */
class WorkflowTemplateFactory extends Factory
{

    protected $model = WorkflowTemplate::class;


    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => $this->faker->randomElement(['Basic Approval Flow', 'Advanced Approval Flow', 'Intermediate Approval Flow']),  // e.g. "Basic Approval Flow"
            'description' => $this->faker->paragraph(),
            'creator_id' =>  User::inRandomOrder()->first()->id, // links to users
            'is_public' => $this->faker->boolean(30), // 30% chance public
        ];
    }
}
----
--database/migrations/0001_01_01_000000_create_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('firstname');
            $table->string('lastname');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};
----
--database/migrations/0001_01_01_000001_create_cache_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
----
--database/migrations/0001_01_01_000002_create_jobs_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
----
--database/migrations/2025_09_13_015642_create_addresses_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('addresses', function (Blueprint $table) {
            $table->id();
            $table->string('house_no')->nullable();
            $table->string('street')->nullable();
            $table->string('barangay')->nullable();
            $table->string('town')->nullable();
            $table->string('province')->nullable();
            $table->string('country')->nullable();
            $table->decimal('lat', 10, 6)->nullable();
            $table->decimal('lng', 10, 6)->nullable();
            
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('addresses');
    }
};
----
--database/migrations/2025_09_13_025308_create_permission_tables.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $teams = config('permission.teams');
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';
        $pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';

        throw_if(empty($tableNames), new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));
        throw_if($teams && empty($columnNames['team_foreign_key'] ?? null), new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));

        Schema::create($tableNames['permissions'], static function (Blueprint $table) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], static function (Blueprint $table) use ($teams, $columnNames) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
            $table->unsignedBigInteger($pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
            $table->unsignedBigInteger($pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], static function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
            $table->unsignedBigInteger($pivotPermission);
            $table->unsignedBigInteger($pivotRole);

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([$pivotPermission, $pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
};
----
--database/migrations/2025_09_30_043447_create_categories_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name')->uniqiue()->notNullable();
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('categories');
    }
};
----
--database/migrations/2025_09_30_043448_create_workflowtemplates_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('workflow_templates', function (Blueprint $table) {
            $table->id('id');
            $table->string('title');
            $table->string('description');
            $table->foreignId('creator_id')->constrained('users');
            $table->boolean('is_public')->default(false);
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('workflow_templates', function (Blueprint $table) {
            //
        });
    }
};
----
--database/migrations/2025_09_30_043449_create_services_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('services', function (Blueprint $table) {
            $table->id('id');
            $table->foreignId('creator_id')->constrained('users');
            $table->string('title');
            $table->string('description');
            $table->decimal('price', 10, 2);
            $table->foreignId('address_id')->constrained('addresses');
            $table->foreignId('category_id')->constrained();
            $table->boolean('pay_first')->default(true);
            $table->foreignId('workflow_template_id')->constrained();
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('services', function (Blueprint $table) {
            //
        });
    }
};
----
--database/migrations/2025_10_02_045910_create_open_offers_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('open_offers', function (Blueprint $table) {
            // 'title', 'description', 'budget', 'pay_first', 'category_id', 'creator_id', 'workflow_template_id', 'address_id'
            $table->id();
            $table->string('title');
            $table->string('description');
            $table->decimal('budget', 10, 2);
            $table->boolean('pay_first');
            $table->boolean('fulfilled');
            $table->foreignId('address_id')->constrained('addresses');
            $table->foreignId('category_id')->constrained();
            $table->foreignId('creator_id')->constrained('users');
            $table->foreignId('workflow_template_id')->constrained()->nullable();
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('open_offers');
    }
};
----
--database/migrations/2025_10_08_003332_create_listing_reviews_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('listing_reviews', function (Blueprint $table) {
            $table->id();
            // morphic table
            $table->morphs('listing');
            $table->foreignId('reviewer_id')->constrained('users');
            // $table->foreignId('order_id')->constrained('orders');
            $table->integer('rating');
            $table->string('comment');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('listing_reviews');
    }
};
----
--database/migrations/2025_10_08_004730_create_open_offer_bids_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('open_offer_bids', function (Blueprint $table) {
            $table->id();
            // open offer id, bidder id, service id, proposed price..
            $table->foreignId('open_offer_id')->constrained('open_offers');
            $table->foreignId('bidder_id')->constrained('users');
            $table->foreignId('service_id')->constrained('services');
            $table->decimal('proposed_price', 10, 2);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('open_offer_bids');
    }
};
----
--database/migrations/2025_10_26_174121_create_user_addresses_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('user_addresses', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users');
            $table->foreignId('address_id')->constrained('addresses');
            $table->boolean('is_primary')->default(false);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('user_addresses');
    }
};
----
--database/migrations/2025_10_29_000831_create_work_catalogs_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('work_catalogs', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->json('default_config')->nullable(); // for defaults like time limits, role, etc.
            $table->timestamps();
        });
    }


    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('work_catalogs');
    }
};
----
--database/migrations/2025_10_29_001010_create_work_templates_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('work_templates', function (Blueprint $table) {
            $table->id();
            $table->foreignId('workflow_template_id')
                ->constrained()
                ->onDelete('cascade');

            $table->foreignId('work_catalog_id')
                ->constrained()
                ->onDelete('cascade');

            $table->unsignedInteger('order_index')->default(0);
            $table->string('custom_label')->nullable();
            $table->json('custom_config')->nullable();

        $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('work_templates');
    }
};
----
--database/migrations/2025_10_29_010147_create_listing_images_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('listing_images', function (Blueprint $table) {
            $table->id();

            // Polymorphic relation fields
            $table->morphs('imageable'); // creates imageable_id & imageable_type columns

            // Image attributes
            $table->string('path');             // e.g., storage path or S3 URL
            $table->string('thumbnail_path')->nullable(); // optional thumbnail
            $table->string('alt_text')->nullable();
            $table->unsignedInteger('order_index')->default(0); // for sorting images
            $table->boolean('is_primary')->default(false);

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('listing_images');
    }
};
----
--database/seeders/AddressSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Common\Models\Address;
use App\Domains\Common\Models\UserAddress;
use App\Domains\Users\Models\User;

class AddressSeeder extends Seeder
{
    public function run(): void
    {
        $addresses = [
            [
                'house_no' => '123',
                'street' => 'Main Street',
                'barangay' => 'Poblacion',
                'town' => 'Tagudin',
                'province' => 'Ilocos Sur',
                'country' => 'Philippines',
                'lat' => 17.0833,
                'lng' => 120.4500,
            ],
            [
                'house_no' => '456',
                'street' => 'Rizal Avenue',
                'barangay' => 'San Juan',
                'town' => 'Sta. Cruz',
                'province' => 'Ilocos Sur',
                'country' => 'Philippines',
                'lat' => 17.1667,
                'lng' => 120.4833,
            ],
            [
                'house_no' => '789',
                'street' => 'Del Pilar Street',
                'barangay' => 'Centro',
                'town' => 'Candon',
                'province' => 'Ilocos Sur',
                'country' => 'Philippines',
                'lat' => 17.1903,
                'lng' => 120.4472,
            ],
            [
                'house_no' => '321',
                'street' => 'Luna Avenue',
                'barangay' => 'Poblacion East',
                'town' => 'Luna',
                'province' => 'La Union',
                'country' => 'Philippines',
                'lat' => 16.8389,
                'lng' => 120.3833,
            ],
            [
                'house_no' => '654',
                'street' => 'Bonifacio Street',
                'barangay' => 'San Nicolas',
                'town' => 'Vigan',
                'province' => 'Ilocos Sur',
                'country' => 'Philippines',
                'lat' => 17.5747,
                'lng' => 120.3869,
            ],
        ];

        foreach ($addresses as $addressData) {
            Address::create($addressData);
        }

        // Assign addresses to users
        $users = User::all();
        $allAddresses = Address::all();

        foreach ($users as $index => $user) {
            // Each user gets 1-2 addresses
            $numAddresses = rand(1, 2);
            $userAddresses = $allAddresses->random(min($numAddresses, $allAddresses->count()));

            foreach ($userAddresses as $addressIndex => $address) {
                UserAddress::create([
                    'user_id' => $user->id,
                    'address_id' => $address->id,
                    'is_primary' => $addressIndex === 0, // First address is primary
                ]);
            }
        }
    }
}
----
--database/seeders/CategorySeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Listings\Models\Category;

class CategorySeeder extends Seeder
{
    public function run(): void
    {
        $categories = [
            'Event Decorating Service',
            'Catering Service',
            'Home Repair & Maintenance',
            'Construction Service',
            'Programming & Tech',
            'Graphics & Design',
            'Digital Marketing',
            'Writing & Translation',
            'Video & Animation',
            'AI Services',
            'Music & Audio',
            'Business Consulting',
            'Photography',
            'Automotive Repair',
            'Landscaping & Gardening',
            'Cleaning Services',
            'Pet Care',
            'Tutoring & Education',
            'Health & Fitness',
            'Beauty Services',
        ];

        foreach ($categories as $categoryName) {
            Category::firstOrCreate(['name' => $categoryName]);
        }
    }
}
----
--database/seeders/DatabaseSeeder.php
<?php

namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            // 1. Create roles first
            RolesSeeder::class,
            
            // 2. Create users (they need roles)
            UserSeeder::class,
            
            // 3. Create addresses and link to users
            AddressSeeder::class,
            
            // 4. Create categories
            CategorySeeder::class,
            
            // 5. Create work catalogs (building blocks for workflows)
            WorkCatalogSeeder::class,
            
            // 6. Create workflow templates and work templates
            WorkflowAndWorkTemplateSeeder::class,
            
            // 7. Create services and open offers (need all previous data)
            ListingsSeeder::class,
            
            // 8. Optional: Create some bids on open offers
            // OpenOfferBidSeeder::class,
        ]);
    }
}
----
--database/seeders/ListingsSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Listings\Models\Service;
use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Listings\Models\Category;
use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Common\Models\Address;
use App\Domains\Users\Models\User;

class ListingsSeeder extends Seeder
{
    public function run(): void
    {
        $users = User::all();
        $categories = Category::all();
        $workflows = WorkflowTemplate::where('is_public', true)->get();
        $addresses = Address::all();

        // Create Services
        $services = [
            [
                'title' => 'Arnel\'s Professional Plumbing',
                'description' => 'Expert plumbing services for all your needs. Leak repairs, pipe installations, and drain cleaning.',
                'price' => 200.00,
                'pay_first' => false,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'Basic Plumbing Service',
            ],
            [
                'title' => 'Quality House Painting',
                'description' => 'Professional interior and exterior painting. Color consultation included.',
                'price' => 150.00,
                'pay_first' => false,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'House Painting Service',
            ],
            [
                'title' => 'Maria\'s Catering Services',
                'description' => 'Delicious Filipino cuisine for all occasions. Birthday parties, weddings, and corporate events.',
                'price' => 250.00,
                'pay_first' => true,
                'category' => 'Catering Service',
                'workflow' => 'Event Catering Service',
            ],
            [
                'title' => 'Elite Event Decorations',
                'description' => 'Beautiful event setups for weddings, birthdays, and special occasions.',
                'price' => 3500.00,
                'pay_first' => true,
                'category' => 'Event Decorating Service',
                'workflow' => 'Event Decoration Service',
            ],
            [
                'title' => 'Quick Fix Electrical Services',
                'description' => 'Licensed electrician for repairs, installations, and troubleshooting.',
                'price' => 180.00,
                'pay_first' => false,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'Electrical Repair Service',
            ],
            [
                'title' => 'Reliable Construction Services',
                'description' => 'Small to medium construction projects. Renovations, extensions, and repairs.',
                'price' => 500.00,
                'pay_first' => true,
                'category' => 'Construction Service',
                'workflow' => 'Small Construction Project',
            ],
            [
                'title' => 'Budget-Friendly Catering',
                'description' => 'Affordable catering for small gatherings. Minimum 20 guests.',
                'price' => 150.00,
                'pay_first' => true,
                'category' => 'Catering Service',
                'workflow' => 'Event Catering Service',
            ],
            [
                'title' => 'Expert Tile Installation',
                'description' => 'Professional tile work for bathrooms, kitchens, and floors.',
                'price' => 220.00,
                'pay_first' => false,
                'category' => 'Construction Service',
                'workflow' => 'Small Construction Project',
            ],
        ];

        foreach ($services as $serviceData) {
            $category = $categories->firstWhere('name', $serviceData['category']);
            $workflow = $workflows->firstWhere('title', $serviceData['workflow']);
            $user = $users->random();
            $address = $addresses->random();

            Service::create([
                'title' => $serviceData['title'],
                'description' => $serviceData['description'],
                'price' => $serviceData['price'],
                'pay_first' => $serviceData['pay_first'],
                'category_id' => $category->id,
                'creator_id' => $user->id,
                'workflow_template_id' => $workflow->id,
                'address_id' => $address->id,
            ]);
        }

        // Create Open Offers
        $openOffers = [
            [
                'title' => 'Looking for Catering Service',
                'description' => 'Need catering for 50 guests at a birthday party. Filipino cuisine preferred.',
                'budget' => 5000.00,
                'category' => 'Catering Service',
                'workflow' => 'Event Catering Service',
                'fulfilled' => false,
            ],
            [
                'title' => 'Need House Painting',
                'description' => '2-story house needs exterior painting. Labor only, we will provide materials.',
                'budget' => 12000.00,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'House Painting Service',
                'fulfilled' => false,
            ],
            [
                'title' => 'Event Decoration Needed',
                'description' => 'Wedding decoration for outdoor venue. Rustic theme, 100 guests.',
                'budget' => 15000.00,
                'category' => 'Event Decorating Service',
                'workflow' => 'Event Decoration Service',
                'fulfilled' => false,
            ],
            [
                'title' => 'Plumbing Repair Urgent',
                'description' => 'Major leak in bathroom. Need immediate repair.',
                'budget' => 3000.00,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'Basic Plumbing Service',
                'fulfilled' => false,
            ],
            [
                'title' => 'Small Bathroom Renovation',
                'description' => 'Looking for contractor to renovate small bathroom. Tiles and fixtures replacement.',
                'budget' => 25000.00,
                'category' => 'Construction Service',
                'workflow' => 'Small Construction Project',
                'fulfilled' => false,
            ],
            [
                'title' => 'Electrical Wiring Installation',
                'description' => 'New room needs complete electrical wiring. Licensed electrician required.',
                'budget' => 8000.00,
                'category' => 'Home Repair & Maintenance',
                'workflow' => 'Electrical Repair Service',
                'fulfilled' => false,
            ],
            [
                'title' => 'Birthday Party Catering',
                'description' => 'Simple menu for 30 people. Kids birthday party.',
                'budget' => 4000.00,
                'category' => 'Catering Service',
                'workflow' => 'Event Catering Service',
                'fulfilled' => true,
            ],
        ];

        foreach ($openOffers as $offerData) {
            $category = $categories->firstWhere('name', $offerData['category']);
            $workflow = $workflows->firstWhere('title', $offerData['workflow']);
            $user = $users->random();
            $address = $addresses->random();

            OpenOffer::create([
                'title' => $offerData['title'],
                'description' => $offerData['description'],
                'budget' => $offerData['budget'],
                'pay_first' => true,
                'fulfilled' => $offerData['fulfilled'],
                'category_id' => $category->id,
                'creator_id' => $user->id,
                'workflow_template_id' => $workflow->id,
                'address_id' => $address->id,
            ]);
        }
    }
}
----
--database/seeders/OpenOfferBidSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Listings\Models\OpenOfferBid;
use App\Domains\Listings\Models\OpenOffer;
use App\Domains\Listings\Models\Service;
use App\Domains\Users\Models\User;

class OpenOfferBidSeeder extends Seeder
{
    public function run(): void
    {
        // Get unfulfilled open offers
        $openOffers = OpenOffer::where('fulfilled', false)->get();
        
        foreach ($openOffers as $offer) {
            // Each open offer gets 2-4 bids
            $numBids = rand(2, 4);
            
            // Get services in the same category
            $relevantServices = Service::where('category_id', $offer->category_id)
                ->inRandomOrder()
                ->take($numBids)
                ->get();
            
            foreach ($relevantServices as $service) {
                // Calculate proposed price (80%-120% of offer budget)
                $minPrice = $offer->budget * 0.8;
                $maxPrice = $offer->budget * 1.2;
                $proposedPrice = rand($minPrice * 100, $maxPrice * 100) / 100;
                
                // Create bid
                OpenOfferBid::create([
                    'open_offer_id' => $offer->id,
                    'bidder_id' => $service->creator_id,
                    'service_id' => $service->id,
                    'proposed_price' => $proposedPrice,
                ]);
            }
        }
        
        $this->command->info('Created bids for ' . $openOffers->count() . ' open offers');
    }
}
----
--database/seeders/RolesSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;

class RolesSeeder extends Seeder
{
    public function run(): void
    {
        Role::firstOrCreate(['name' => 'user', 'guard_name' => 'web']);
        Role::firstOrCreate(['name' => 'moderator', 'guard_name' => 'web']);
        Role::firstOrCreate(['name' => 'admin', 'guard_name' => 'web']);
    }
}
----
--database/seeders/UserSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Users\Models\User;


class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // collection acnt be assigned role so have each function
        
        User::create([
            'firstname' => 'First',
            'lastname' => 'User',
            'password' => bcrypt('password123'),
            'email' => 'user@localhost',
        ])->assignRole('user');

        User::create([
            'firstname' => 'Moderator',
            'lastname' => 'User',
            'password' => bcrypt('password123'),
            'email' => 'moderator@localhost',
        ])->assignRole('moderator');

        User::create([
            'firstname' => 'Admin',
            'lastname' => 'User',
            'password' => bcrypt('password123'),
            'email' => 'admin@localhost',
        ])->assignRole('admin');
    }
}
----
--database/seeders/WorkCatalogSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Listings\Models\WorkCatalog;

class WorkCatalogSeeder extends Seeder
{
    public function run(): void
    {
        $workCatalogs = [
            [
                'name' => 'Initial Consultation',
                'description' => 'Meet with client to discuss requirements and expectations',
                'default_config' => [
                    'estimated_duration' => '1-2 hours',
                    'location' => 'client_location',
                    'requirements' => ['notepad', 'measuring_tools']
                ]
            ],
            [
                'name' => 'Site Inspection',
                'description' => 'Visit and assess the work location',
                'default_config' => [
                    'estimated_duration' => '30 minutes - 1 hour',
                    'requirements' => ['camera', 'measuring_tape']
                ]
            ],
            [
                'name' => 'Material Purchase',
                'description' => 'Acquire necessary materials and supplies',
                'default_config' => [
                    'estimated_duration' => '2-4 hours',
                    'payment_type' => 'client_advance'
                ]
            ],
            [
                'name' => 'On-site Work',
                'description' => 'Perform the actual service work',
                'default_config' => [
                    'estimated_duration' => 'varies',
                    'location' => 'client_location'
                ]
            ],
            [
                'name' => 'Quality Check',
                'description' => 'Review completed work for quality assurance',
                'default_config' => [
                    'estimated_duration' => '30 minutes',
                    'requires_client' => true
                ]
            ],
            [
                'name' => 'Final Cleanup',
                'description' => 'Clean up work area and remove debris',
                'default_config' => [
                    'estimated_duration' => '30 minutes - 1 hour',
                ]
            ],
            [
                'name' => 'Client Walkthrough',
                'description' => 'Present finished work to client for approval',
                'default_config' => [
                    'estimated_duration' => '15-30 minutes',
                    'requires_client' => true
                ]
            ],
            [
                'name' => 'Payment Collection',
                'description' => 'Collect payment from client',
                'default_config' => [
                    'payment_methods' => ['cash', 'gcash', 'bank_transfer']
                ]
            ],
            [
                'name' => 'Documentation',
                'description' => 'Take photos and document completed work',
                'default_config' => [
                    'estimated_duration' => '15 minutes',
                    'requirements' => ['camera', 'smartphone']
                ]
            ],
            [
                'name' => 'Follow-up Visit',
                'description' => 'Return to check on completed work',
                'default_config' => [
                    'estimated_duration' => '30 minutes',
                    'typical_timeframe' => '1-2 weeks after completion'
                ]
            ],
        ];

        foreach ($workCatalogs as $catalog) {
            WorkCatalog::create($catalog);
        }
    }
}
----
--database/seeders/WorkflowAndWorkTemplateSeeder.php
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Domains\Listings\Models\WorkflowTemplate;
use App\Domains\Listings\Models\WorkTemplate;
use App\Domains\Listings\Models\WorkCatalog;
use App\Domains\Users\Models\User;

class WorkflowAndWorkTemplateSeeder extends Seeder
{
    public function run(): void
    {
        $users = User::all();
        $workCatalogs = WorkCatalog::all();

        // Plumbing Workflow
        $plumbingWorkflow = WorkflowTemplate::create([
            'title' => 'Basic Plumbing Service',
            'description' => 'Standard workflow for plumbing repairs and installations',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($plumbingWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Site Inspection',
            'Material Purchase',
            'On-site Work',
            'Quality Check',
            'Final Cleanup',
            'Payment Collection',
        ]);

        // House Painting Workflow
        $paintingWorkflow = WorkflowTemplate::create([
            'title' => 'House Painting Service',
            'description' => 'Complete house painting workflow from prep to finish',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($paintingWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Site Inspection',
            'Material Purchase',
            'On-site Work',
            'Quality Check',
            'Final Cleanup',
            'Client Walkthrough',
            'Payment Collection',
            'Documentation',
        ]);

        // Catering Workflow
        $cateringWorkflow = WorkflowTemplate::create([
            'title' => 'Event Catering Service',
            'description' => 'Full-service catering workflow for events',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($cateringWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Material Purchase',
            'On-site Work',
            'Final Cleanup',
            'Client Walkthrough',
            'Payment Collection',
        ]);

        // Construction Workflow
        $constructionWorkflow = WorkflowTemplate::create([
            'title' => 'Small Construction Project',
            'description' => 'Workflow for minor construction and renovation work',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($constructionWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Site Inspection',
            'Material Purchase',
            'On-site Work',
            'Quality Check',
            'Final Cleanup',
            'Client Walkthrough',
            'Payment Collection',
            'Documentation',
            'Follow-up Visit',
        ]);

        // Electrical Repair Workflow
        $electricalWorkflow = WorkflowTemplate::create([
            'title' => 'Electrical Repair Service',
            'description' => 'Standard workflow for electrical repairs and installations',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($electricalWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Site Inspection',
            'Material Purchase',
            'On-site Work',
            'Quality Check',
            'Payment Collection',
            'Follow-up Visit',
        ]);

        // Event Decoration Workflow
        $decorationWorkflow = WorkflowTemplate::create([
            'title' => 'Event Decoration Service',
            'description' => 'Complete event decoration setup workflow',
            'creator_id' => $users->random()->id,
            'is_public' => true,
        ]);

        $this->createWorkTemplates($decorationWorkflow, $workCatalogs, [
            'Initial Consultation',
            'Site Inspection',
            'Material Purchase',
            'On-site Work',
            'Client Walkthrough',
            'Final Cleanup',
            'Payment Collection',
            'Documentation',
        ]);

        // Create some private workflows
        $privateWorkflow = WorkflowTemplate::create([
            'title' => 'Custom Client Workflow',
            'description' => 'Private workflow for specific client requirements',
            'creator_id' => $users->random()->id,
            'is_public' => false,
        ]);

        $this->createWorkTemplates($privateWorkflow, $workCatalogs, [
            'Initial Consultation',
            'On-site Work',
            'Payment Collection',
        ]);
    }

    private function createWorkTemplates($workflow, $workCatalogs, $catalogNames)
    {
        foreach ($catalogNames as $index => $catalogName) {
            $catalog = $workCatalogs->firstWhere('name', $catalogName);
            
            if ($catalog) {
                WorkTemplate::create([
                    'workflow_template_id' => $workflow->id,
                    'work_catalog_id' => $catalog->id,
                    'order_index' => $index,
                    'custom_label' => null,
                    'custom_config' => null,
                ]);
            }
        }
    }
}
----
--resources/css/app.css
@import './navbar.css';
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  /* Button Component */
  .btn {
    @apply rounded-md font-semibold transition duration-200 px-4 py-2;
  }

  .btn-primary {
    @apply bg-brand text-white hover:bg-brand-dark focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 dark:focus:ring-offset-secondary-dark;
  }

  .btn-secondary {
    @apply border border-secondary-dark text-secondary hover:bg-secondary-dark hover:text-white focus:outline-none focus:ring-2 focus:ring-brand focus:ring-offset-2 dark:focus:ring-offset-secondary-dark;
  }

  .btn-outline-white {
    @apply px-4 py-2 border border-white text-white rounded-lg bg-transparent 
           hover:bg-white hover:text-black transition;
  }

  .btn-danger {
    @apply bg-error text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-error focus:ring-offset-2 dark:focus:ring-offset-secondary-dark;
  }


  /* Dropdown Component */
  .dropdown-link {
    @apply block w-full px-4 py-2 text-sm leading-5 text-left font-body;
  }

  .dropdown-active {
    @apply text-brand bg-background-secondary dark:text-brand dark:bg-secondary-dark;
  }
  .dropdown-active:hover {
    @apply bg-brand/10 dark:bg-brand-dark/10;
  }

  .dropdown-inactive {
    @apply text-text-secondary dark:text-text;
  }
  .dropdown-inactive:hover {
    @apply bg-background-secondary text-text dark:bg-secondary-dark dark:text-text-secondary;
  }

  /* Status Component */
  .status-message {
    @apply font-medium text-sm font-body;
  }

  .status-success {
    @apply text-brand dark:text-brand-dark;
  }

/* ================================
  FORM LAYOUT WRAPPERS
  ================================ */

  /* Listing Card Component */
  .listing-card {
    @apply bg-white rounded-xl shadow hover:shadow-md transition p-5 flex flex-col;
  }

  /* Card top row (badge + right info) */
  .card-top {
    @apply flex items-center justify-between mb-3;
  }

  /* Badges */
  .badge-service {
    @apply px-2 py-1 text-xs bg-green-100 text-green-700 rounded;
  }
  .badge-offer {
    @apply px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded;
  }

  /* Card Titles & Description */
  .card-desc {
    @apply text-gray-500 text-sm mb-2;
  }
  .card-meta {
    @apply text-gray-600 text-sm;
  }

  /* Card Footer */
  .card-footer {
    @apply mt-3 flex justify-between items-center;
  }
  .card-footer span {
    @apply text-xs text-gray-500;
  }

  /* Avatar/Icon inside card */
  .card-avatar {
    @apply w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center;
  }

  /* Card Titles & Description */
  .card-title {
    @apply text-lg font-bold;
  }

  /* ================================
     FORM LAYOUT WRAPPERS
     ================================ */
  .form-wrapper {
    @apply flex items-center min-h-screen bg-gradient-to-br from-green-50 via-white to-gray-100;
  }

  .form-wrapper-centered {
    @apply justify-center;
  }

  .form-wrapper-left {
    @apply justify-start;
  }

  .form-wrapper-right {
    @apply justify-end;
  }

  /* ================================
     FORM CARD CONTAINER
     ================================ */
  .form-container {
    @apply bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100;
  }

  /* Card variants for dashboard use */
  .form-container-neutral {
    @apply bg-background shadow-md rounded-md p-6 w-full border border-secondary dark:bg-secondary-dark dark:border-secondary-dark;
  }

  /* ================================
     FORM HEADERS
     ================================ */
  .form-header {
    @apply flex flex-col items-center mb-8;
  }

  .form-icon {
    @apply bg-green-100 rounded-full p-3 mb-3;
  }

  .form-title {
    @apply text-xl font-bold text-gray-800;
  }

  .form-subtitle {
    @apply text-gray-500 text-sm mt-1 text-center;
  }

  /* ================================
     LABELS, INPUTS, AND ERRORS
     ================================ */
  .form-label {
    @apply block font-medium text-sm text-gray-700 mb-2 font-body;
  }

  .form-input {
    @apply w-full px-4 py-3 border border-gray-200 rounded-lg bg-white 
           focus:outline-none focus:ring-2 focus:ring-green-400 transition;
  }

  .form-error {
    @apply text-error dark:text-error/80 text-sm mt-1 font-body;
  }

  /* ================================
     BUTTONS
     ================================ */
  .form-button {
    @apply w-full bg-gradient-to-r from-green-500 to-green-600 text-white py-3 rounded-lg 
           font-semibold shadow hover:from-green-600 hover:to-green-700 transition;
  }

  .form-button-danger {
    @apply w-full bg-red-600 text-white py-3 rounded-lg font-semibold shadow 
           hover:bg-red-700 transition;
  }

  .form-alt-button {
    @apply w-full flex items-center justify-center gap-2 border border-gray-300 py-2 rounded-lg 
           hover:bg-gray-50 transition;
  }

  /* ================================
     DIVIDERS AND FOOTERS
     ================================ */
  .form-divider {
    @apply flex items-center my-6;
  }

  .form-divider-line {
    @apply flex-grow border-t border-gray-200;
  }

  .form-divider-text {
    @apply mx-3 text-gray-400 text-xs;
  }

  .form-footer {
    @apply text-center text-gray-600 mt-6 text-sm;
  }

  /* Modal Component */
  .modal-overlay {
    @apply fixed inset-0 overflow-y-auto px-1 py-2 sm:px-0 z-modal;
  }

  .modal-content {
    @apply mb-2 bg-background dark:bg-secondary-dark rounded-md overflow-hidden shadow-md transform transition-all sm:w-full sm:mx-auto;
  }

  .modal-enter {
    @apply ease-out duration-300;
  }

  .modal-enter-start {
    @apply opacity-0 translate-y-2 sm:translate-y-0 sm:scale-95;
  }

  .modal-enter-end {
    @apply opacity-100 translate-y-0 sm:scale-100;
  }

  .modal-leave {
    @apply ease-in duration-200;
  }

  .modal-leave-start {
    @apply opacity-100 translate-y-0 sm:scale-100;
  }

  .modal-leave-end {
    @apply opacity-0 translate-y-2 sm:translate-y-0 sm:scale-95;
  }

  .modal-backdrop {
    @apply fixed inset-0 bg-secondary-dark dark:bg-secondary-dark opacity-75;
  }

  /* Status Component */
  .status-message {
    @apply font-medium text-sm font-body;
  }

  .status-success {
    @apply text-brand dark:text-brand-dark;
  }
}

@layer utilities {
  /* hide scrollbar (Chrome/Safari/Edge/Opera + Firefox + IE/Edge) */
  .scrollbar-hide {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none; /* WebKit */
  }

  /* optional: smooth touch scrolling on iOS */
  .touch-scroll {
    -webkit-overflow-scrolling: touch;
  }
}
----
--resources/css/browse.css
@import './app.css';
@layer components {
  /* =======================
    Browse Section & Cards
    ======================= */

  /* Section wrapper */
  .browse-section {
    @apply py-12 px-6 bg-gray-50;
  }

  /* Inner container */
  .browse-inner {
    @apply max-w-6xl mx-auto;
  }

  /* Header Row */
  .browse-header {
    @apply flex flex-col lg:flex-row md:items-center md:justify-between mb-8;
  }

  .browse-title {
    @apply text-3xl font-bold;
  }

  /* Filters */
  .browse-filters {
    @apply flex flex-wrap gap-3 mt-4;
  }

  /* Buttons */
  .filter-btn {
    @apply px-2 p-1 md:px-4 md:py-2 rounded-lg border text-xs md:text-sm transition;
  }
  .filter-btn-primary {
    @apply bg-green-600 text-white hover:bg-green-700 text-base md:text-sm;
  }
  .filter-btn-outline {
    @apply bg-white border hover:bg-gray-200 text-gray-700;
  }

  /* Selects */
  .filter-select {
    @apply px-3 py-2 border rounded-lg text-xs md:text-sm;
  }

  /* Card Grid */
  .browse-grid {
    @apply grid gap-6 sm:grid-cols-2 lg:grid-cols-3;
  }

  /* Single Card */
  .browse-card {
    @apply bg-white rounded-xl shadow hover:shadow-md transition p-5 flex flex-col;
  }

  /* Card top row (badge + right info) */
  .card-top {
    @apply flex items-center justify-between mb-3;
  }

  /* Badges */
  .badge-service {
    @apply px-2 py-1 text-xs bg-green-100 text-green-700 rounded;
  }
  .badge-offer {
    @apply px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded;
  }

  /* Card Titles & Description */
  .card-title {
    @apply text-lg font-bold;
  }
  .card-desc {
    @apply text-gray-500 text-sm mb-2;
  }
  .card-meta {
    @apply text-gray-600 text-sm;
  }

  /* Card Footer */
  .card-footer {
    @apply mt-3 flex justify-between items-center;
  }
  .card-footer span {
    @apply text-xs text-gray-500;
  }

  /* Avatar/Icon inside card */
  .card-avatar {
    @apply w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center;
  }

  /* "View More" Button */
  .browse-viewmore {
    @apply px-6 py-3 bg-green-600 text-white rounded-lg font-semibold shadow hover:bg-green-700 transition;
  }
}
----
--resources/css/home.css
@import './app.css';
@import "swiper/css";
@import "swiper/css/navigation";
@import "swiper/css/pagination";

@layer components {

    /* Hero search input */
  .hero-search {
    @apply px-4 py-3 sm:w-[300px] md:w-[450px] w-[200px] text-sm rounded-l-lg text-black 
           focus:outline-none focus:ring-2 focus:ring-brand
           placeholder-gray-400 ; 
  }

  /* Transparent white outline button */
  .btn-outline-white {
    @apply px-4 py-2 rounded-lg border border-white text-white 
           bg-transparent hover:bg-white hover:text-black 
           transition duration-300;
  }

  /* Swiper arrows */
  .swiper-button-next,
  .swiper-button-prev {
    @apply w-12 h-12 flex items-center justify-center rounded-full !text-white transition duration-300;
  }

  /* Swiper pagination dots */
  .swiper-pagination-bullet {
    @apply w-3 h-3 bg-white opacity-60;
  }
  .swiper-pagination-bullet-active {
    @apply bg-white opacity-100;
  }

  /* Explore Categories Section */
  .section-categories {
    @apply py-12 px-6 bg-background;
  }

  .section-categories-title {
    @apply text-3xl font-bold text-center mb-8 font-display text-text;
  }

  .categories-scroll {
    @apply flex space-x-4 overflow-x-auto px-4 scrollbar-hide;
  }

  .category-card {
    @apply flex-shrink-0 w-48 bg-background-secondary shadow-sm p-6 rounded-lg text-center 
           hover:shadow-md transition cursor-pointer;
  }

  .category-icon {
    @apply text-3xl;
  }

  .category-label {
    @apply mt-2 font-medium text-text;
  }


    /* =======================
    Create Section
    ======================= */

    /* Section Wrapper */
    .create-section {
    @apply py-16 px-6 bg-gray-50;
    }

    /* Section Container */
    .create-container {
    @apply max-w-4xl mx-auto text-center;
    }

    .create-container h2 {
    @apply text-3xl font-bold mb-6;
    }

    .create-container p {
    @apply text-gray-600 mb-10;
    }

    /* Grid Layout */
    .create-grid {
    @apply grid md:grid-cols-2 gap-6;
    }

    /* Card */
    .create-card {
    @apply bg-white rounded-xl shadow hover:shadow-md transition p-6 flex flex-col;
    }

    .create-card h3 {
    @apply text-lg font-semibold mb-4;
    }

    /* Textarea */
    .create-card textarea {
    @apply w-full border px-4 py-3 rounded-lg mb-4 text-sm focus:outline-none focus:ring-2 focus:ring-green-600;
    }

    /* Button */
    .create-card button {
    @apply w-full bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700 transition;
    }

        /* =======================
    Featured Workflows Section
    ======================= */

    /* Section */
    .workflows-section {
    @apply py-12 px-6 bg-white;
    }

    /* Container */
    .workflows-container {
    @apply max-w-6xl mx-auto text-center;
    }

    .workflows-container h2 {
    @apply text-3xl font-bold mb-8;
    }

    .workflows-container p {
    @apply text-gray-600 mb-10;
    }

    /* Grid */
    .workflows-grid {
    @apply grid gap-6 sm:grid-cols-2 lg:grid-cols-3;
    }

    /* Card */
    .workflow-card {
    @apply bg-gray-50 rounded-xl shadow hover:shadow-md transition p-5 flex flex-col text-left;
    }

    .workflow-card h3 {
    @apply text-lg font-bold mb-2;
    }

    .workflow-card p {
    @apply text-gray-600 text-sm mb-4;
    }

    /* Card Footer */
    .workflow-actions {
    @apply flex justify-end mt-auto gap-2;
    }

    /* Buttons */
    .workflow-actions .btn-service {
    @apply px-3 py-1 bg-green-600 text-white text-xs rounded-lg hover:bg-green-700;
    }

    .workflow-actions .btn-offer {
    @apply px-3 py-1 border text-xs rounded-lg hover:bg-gray-200;
    }


}
----
--resources/css/navbar.css
@layer components {
  /* Navbar container */
  .navbar {
    @apply sticky top-0 z-50 bg-background shadow;
  }

  .navbar-inner {
    @apply max-w-7xl mx-auto flex justify-between items-center px-6 py-4;
  }

  /* Brand */
  .navbar-brand {
    @apply text-2xl font-bold flex items-center hover:opacity-50;
  }
  .navbar-brand-text {
    @apply text-text;
  }
  .navbar-brand-accent {
    @apply text-brand;
  }

  /* Desktop nav links */
  .navbar-nav {
    @apply hidden md:flex items-center space-x-6 text-text-secondary;
  }
  .navbar-link {
    @apply hover:text-brand transition;
  }

  /* Auth section */
  .navbar-auth {
    @apply flex items-center space-x-4 pl-7;
  }
  .navbar-auth-link {
    @apply hover:text-brand transition;
  }
  .navbar-auth-button {
    @apply px-4 py-1 border border-text rounded hover:bg-text hover:text-background transition;
  }

  /* Mobile hamburger */
  .navbar-toggle {
    @apply md:hidden text-text focus:outline-none;
  }

  /* Mobile menu */
  .navbar-mobile {
    @apply md:hidden px-6 py-4 space-y-3 absolute w-full text-text-secondary bg-background border-t;
  }
  .navbar-mobile-link {
    @apply block hover:text-brand transition;
  }
  .navbar-mobile-auth {
    @apply pt-3 border-t;
  }
  .navbar-mobile-button {
    @apply  w-full mt-2 px-4 py-2 border border-text rounded hover:bg-text hover:text-background transition;
  }

  /* hide until Alpine is ready */
  [x-cloak] { display: none !important; }

  /* Profile trigger */
  .navbar-profile-trigger {
    @apply flex items-center justify-center w-10 h-10 rounded-full hover:opacity-80 transition;
  }

  /* Profile image */
  .navbar-profile-img {
    @apply w-10 h-10 rounded-full object-cover;
  }

  /* Profile fallback */
  .navbar-profile-fallback {
    @apply flex items-center justify-center w-10 h-10 rounded-full bg-black;
  }

  /* Dropdown menu */
  .navbar-profile-dropdown {
    @apply absolute right-0 top-12 mt-2 w-48 bg-background shadow-lg rounded-lg border border-gray-200 z-50;
  }

  /* Dropdown item */
  .navbar-profile-item {
    @apply block px-4 py-2 text-sm text-text hover:bg-gray-100 transition;
  }

  /* Creator button */
  .navbar-creator-btn {
    @apply px-4 py-1 rounded bg-brand text-background font-semibold hover:opacity-90 transition;
  }

  /* Mobile button override (if needed) */
  .navbar-mobile-button { @apply mt-2 px-4 py-2 border border-text rounded hover:bg-text hover:text-background transition; }



  /* Active  */
  .navbar-link.active,
    .navbar-auth-link.active, 
      .navbar-mobile-link.active {
          @apply font-bold text-green-600;
      }
}
----
--resources/js/app.js
import './bootstrap';
import Alpine from 'alpinejs';

window.Alpine = Alpine;

Alpine.start();
----
--resources/js/bootstrap.js
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
----
--resources/js/home.js
import './app';
import Swiper from 'swiper';
import { Navigation, Pagination, Autoplay, Keyboard } from 'swiper/modules';

import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

document.addEventListener("DOMContentLoaded", () => {
    const swiper = new Swiper('.heroSwiper', {
        modules: [Navigation, Pagination, Autoplay, Keyboard],
        loop: true,
        autoplay: { 
            delay: 5000, 
            disableOnInteraction: false 
        },
        pagination: { 
            el: '.swiper-pagination', 
            clickable: true 
        },
        navigation: { 
            nextEl: '.swiper-button-next', 
            prevEl: '.swiper-button-prev' 
        },
        keyboard: { enabled: true },
        touchEventsTarget: 'container',
        simulateTouch: true,
        grabCursor: true,
        effect: 'slide',
        speed: 600,
    });
});
----
--resources/views/browse.blade.php
<x-app-layout title="Browse Services" cssFiles="browse.css">
  <div class="max-w-7xl mx-auto px-6 py-10 space-y-8">
    <!-- Sticky Search + Filters -->
    <div x-data="{ openFilters: false }"
         class="sticky top-20 bg-gray-50 z-40 p-4 rounded-b-xl shadow-md flex flex-col md:flex-row gap-4">
      
      <!-- Top Row: Search + Filter Toggle (Mobile) -->
      <div class="flex-grow flex items-center justify-between">
        <!-- Search Bar -->
        <div class="flex-grow flex items-center">
          <input type="text" placeholder="Search services or offers..."
            class="w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-600 md:text-base text-xs" />
        </div>

        <!-- Filter Toggle (Mobile only) -->
        <button @click="openFilters = !openFilters"
                class="sm:hidden ml-3 bg-green-600 text-white p-2 rounded-lg hover:bg-green-700 transition">
          <x-icons.filter class="w-5 h-5" />
        </button>
      </div>

      <!-- Scrollable Filters -->
      <div class="hidden sm:flex gap-2 overflow-x-auto scrollbar-hide text-xs md:text-base">
        <button class="filter-btn filter-btn-primary flex-shrink-0">All</button>
        <button class="filter-btn filter-btn-outline flex-shrink-0">Services</button>
        <button class="filter-btn filter-btn-outline flex-shrink-0">Open Offers</button>

        <select class="filter-select flex-shrink-0">
          <option>All Categories</option>
          <option>Catering</option>
          <option>Construction</option>
          <option>Repair</option>
        </select>

        <select class="filter-select flex-shrink-0">
          <option>All Locations</option>
          <option>Tagudin</option>
          <option>Sta. Cruz</option>
          <option>Candon</option>
        </select>
      </div>

      <!-- Mobile Dropdown Filters -->
      <div x-show="openFilters"
           x-transition
           @click.away="openFilters = false"
           class="sm:hidden absolute top-full left-0 w-full bg-white border-t border-gray-200 shadow-lg mt-2 rounded-b-xl z-50 p-4 space-y-3">
        <button class="filter-btn filter-btn-primary w-full">All</button>
        <button class="filter-btn filter-btn-outline w-full">Services</button>
        <button class="filter-btn filter-btn-outline w-full">Open Offers</button>

        <select class="filter-select w-full">
          <option>All Categories</option>
          <option>Catering</option>
          <option>Construction</option>
          <option>Repair</option>
        </select>

        <select class="filter-select w-full">
          <option>All Locations</option>
          <option>Tagudin</option>
          <option>Sta. Cruz</option>
          <option>Candon</option>
        </select>
      </div>
    </div>

    <!-- Card Grid -->
    <div class="browse-grid">
      <!-- Service Card -->
      <article class="listing-card">
        <div class="card-top">
          <span class="badge-service">Service</span>
          <span class="rating">★★★★★</span>
        </div>
        <h3 class="card-title">Arnel’s Plumbing</h3>
        <p class="card-desc">Diagnose &gt; Buy materials &gt; On field &gt; Finish</p>
        <p class="card-meta">Rate: ₱200/hr</p>
        <p class="card-meta">Location: Tagudin, Ilocos Sur</p>
        <div class="card-footer">
          <span class="text-xs text-text-secondary">Verified Servicer</span>
          <div class="card-avatar">👤</div>
        </div>
      </article>

      <!-- Open Offer Card -->
      <article class="listing-card">
        <div class="card-top">
          <span class="badge-offer">Open Offer</span>
          <span class="text-sm text-text-secondary">Budget: ₱5,000</span>
        </div>
        <h3 class="card-title">Looking for Catering Service</h3>
        <p class="card-desc">Event for 50 guests</p>
        <p class="card-meta">Sta. Cruz, Ilocos Sur</p>
        <div class="card-footer">
          <span class="text-xs text-text-secondary">Posted 2h ago</span>
          <div class="card-avatar">📝</div>
        </div>
      </article>

      <!-- Service Card -->
      <article class="listing-card">
        <div class="card-top">
          <span class="badge-service">Service</span>
          <span class="rating">★★★★☆</span>
        </div>
        <h3 class="card-title">General Home Repairs</h3>
        <p class="card-desc">Diagnose &gt; Buy materials &gt; On field &gt; Finish</p>
        <p class="card-meta">Rate: ₱150/hr</p>
        <p class="card-meta">Candon, Ilocos Sur</p>
        <div class="card-footer">
          <span class="text-xs text-text-secondary">Trusted Local</span>
          <div class="card-avatar">👤</div>
        </div>
      </article>

      <!-- Open Offer Card -->
      <article class="listing-card">
        <div class="card-top">
          <span class="badge-offer">Open Offer</span>
          <span class="text-sm text-text-secondary">Budget: ₱12,000</span>
        </div>
        <h3 class="card-title">Need House Painting</h3>
        <p class="card-desc">2-story house, labor only</p>
        <p class="card-meta">Luna, La Union</p>
        <div class="card-footer">
          <span class="text-xs text-text-secondary">Posted 1d ago</span>
          <div class="card-avatar">📝</div>
        </div>
      </article>
    </div>
  </div>
</x-app-layout>

----
--resources/views/dashboard.blade.php
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900 dark:text-gray-100">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
----
--resources/views/home.blade.php
<x-app-layout header="Welcome to Serbizyu" :cssFiles='["home.css", "browse.css"]' jsFiles="home.js">
    <!-- Single Hero Section Container with Swiper -->
    <section class="hero-section relative">
    <!-- Swiper Container -->
    <div class="swiper heroSwiper h-[80vh]">
        <div class="swiper-wrapper">
        
        <!-- Slide 1: Services Hero -->
        <div class="swiper-slide">
            <div class="relative h-[80vh] bg-cover bg-center flex items-center justify-center"
            style="background-image: url('https://images.unsplash.com/photo-1614289941451-60f7ce249549?auto=format&fit=crop&w=1350&q=80');">
            <div class="absolute inset-0 bg-black bg-opacity-60"></div>
            <div class="relative z-10 text-center max-w-2xl px-4 text-white">
                <h1 class="text-4xl md:text-6xl font-bold mb-5">
                Kami na ang bahala sa inyong mga pangangailangan.
                </h1>
                
                <!-- Search Bar -->
                <div class="flex justify-center mb-6">
                <input type="text" placeholder="Search for any service..."
                    class="hero-search">
                <x-primary-button class="rounded-l-none rounded-r-lg">
                    <x-icons.search />
                </x-primary-button>
                </div>

                <!-- Categories -->
                <div class="flex flex-wrap justify-center gap-3  text-sm ">
                <x-outline-button>Event Decorating Service</x-outline-button>
                <x-outline-button>Catering Service</x-outline-button>
                <x-outline-button>Home Repair & Maintenance</x-outline-button>
                <x-outline-button>Construction Service</x-outline-button>
                </div>
            </div>
            </div>
        </div>
        
        <!-- Slide 2: Open Offers Hero -->
        <div class="swiper-slide">
            <div class="relative h-[80vh] bg-cover bg-center flex items-center justify-center"
            style="background-image: url('https://images.unsplash.com/photo-1503387762-592deb58ef4e?auto=format&fit=crop&w=1350&q=80');">
            <div class="absolute inset-0 bg-black bg-opacity-60"></div>
            <div class="relative z-10 text-center max-w-2xl px-4 text-white">
                <h1 class="text-4xl md:text-6xl font-bold mb-5">
                Tuklasin ang mga bukas na alok at simulan nang kumita.
                </h1>

                <!-- Search Bar -->
                <div class="flex justify-center mb-6">
                <input type="text" placeholder="Search open offers..."
                    class="hero-search">
                <x-primary-button class="rounded-l-none rounded-r-lg">
                    <x-icons.search />
                </x-primary-button>
                </div>

                <!-- Categories -->
                <div class="flex flex-wrap justify-center gap-3">
                <x-outline-button>Looking for Catering</x-outline-button>
                <x-outline-button>Need Home Repair</x-outline-button>
                <x-outline-button>Event Decoration Needed</x-outline-button>
                <x-outline-button>Small Construction Project</x-outline-button>
                </div>
            </div>
            </div>
        </div>
        </div>
        
        <!-- Swiper Navigation -->
        <div class="swiper-button-next"></div>
        <div class="swiper-button-prev"></div>
        
        <!-- Swiper Pagination -->
        <div class="swiper-pagination"></div>
    </div>
    </section>


    <!-- Explore Categories -->
    <section class="section-categories">
    <h2 class="section-categories-title">Explore categories</h2>

    <!-- Horizontal scroll -->
    <div class="categories-scroll">
        
        <div class="category-card">
        <p class="category-icon">💻</p>
        <p class="category-label">Programming & Tech</p>
        </div>

        <div class="category-card">
        <p class="category-icon">🎨</p>
        <p class="category-label">Graphics & Design</p>
        </div>

        <div class="category-card">
        <p class="category-icon">📈</p>
        <p class="category-label">Digital Marketing</p>
        </div>

        <div class="category-card">
        <p class="category-icon">📝</p>
        <p class="category-label">Writing & Translation</p>
        </div>

        <div class="category-card">
        <p class="category-icon">🎬</p>
        <p class="category-label">Video & Animation</p>
        </div>

        <div class="category-card">
        <p class="category-icon">🤖</p>
        <p class="category-label">AI Services</p>
        </div>

        <div class="category-card">
        <p class="category-icon">🎵</p>
        <p class="category-label">Music & Audio</p>
        </div>

        <div class="category-card">
        <p class="category-icon">💼</p>
        <p class="category-label">Business</p>
        </div>

        <div class="category-card">
        <p class="category-icon">📊</p>
        <p class="category-label">Consulting</p>
        </div>
        
    </div>
    </section>

    <!-- Browse Section -->
    <section class="py-12 px-6 bg-gray-50">
    <div class="browse-inner">
        <div class="browse-header">
        <h2 class="text-3xl font-bold">Browse Offers & Services</h2>

        <!-- Filters -->
        <div class="browse-filters">
            <button class="filter-btn filter-btn-primary">All</button>
            <button class="filter-btn filter-btn-outline">Services</button>
            <button class="filter-btn filter-btn-outline">Open Offers</button>

            <select class="filter-select">
            <option>All Categories</option>
            <option>Catering</option>
            <option>Construction</option>
            <option>Repair</option>
            </select>

            <select class="filter-select">
            <option>All Locations</option>
            <option>Tagudin</option>
            <option>Sta. Cruz</option>
            <option>Candon</option>
            </select>
        </div>
        </div>

        <!-- Card Grid -->
        <div class="browse-grid">

        <!-- Service Card -->
        <article class="listing-card">
            <div class="card-top">
            <span class="badge-service">Service</span>
            <span class="rating">★★★★★</span>
            </div>
            <h3 class="card-title">Arnel’s Plumbing</h3>
            <p class="card-desc">Diagnose &gt; Buy materials &gt; On field &gt; Finish</p>
            <p class="card-meta">Rate: ₱200/hr</p>
            <p class="card-meta">Location: Tagudin, Ilocos Sur</p>
            <div class="card-footer">
            <span class="text-xs text-text-secondary">Verified Servicer</span>
            <div class="card-avatar">👤</div>
            </div>
        </article>

        <!-- Open Offer Card -->
        <article class="listing-card">
            <div class="card-top">
            <span class="badge-offer">Open Offer</span>
            <span class="text-sm text-text-secondary">Budget: ₱5,000</span>
            </div>
            <h3 class="card-title">Looking for Catering Service</h3>
            <p class="card-desc">Event for 50 guests</p>
            <p class="card-meta">Sta. Cruz, Ilocos Sur</p>
            <div class="card-footer">
            <span class="text-xs text-text-secondary">Posted 2h ago</span>
            <div class="card-avatar">📝</div>
            </div>
        </article>

        <!-- Service Card -->
        <article class="listing-card">
            <div class="card-top">
            <span class="badge-service">Service</span>
            <span class="rating">★★★★☆</span>
            </div>
            <h3 class="card-title">General Home Repairs</h3>
            <p class="card-desc">Diagnose &gt; Buy materials &gt; On field &gt; Finish</p>
            <p class="card-meta">Rate: ₱150/hr</p>
            <p class="card-meta">Candon, Ilocos Sur</p>
            <div class="card-footer">
            <span class="text-xs text-text-secondary">Trusted Local</span>
            <div class="card-avatar">👤</div>
            </div>
        </article>

        <!-- Open Offer Card -->
        <article class="listing-card">
            <div class="card-top">
            <span class="badge-offer">Open Offer</span>
            <span class="text-sm text-text-secondary">Budget: ₱12,000</span>
            </div>
            <h3 class="card-title">Need House Painting</h3>
            <p class="card-desc">2-story house, labor only</p>
            <p class="card-meta">Luna, La Union</p>
            <div class="card-footer">
            <span class="text-xs text-text-secondary">Posted 1d ago</span>
            <div class="card-avatar">📝</div>
            </div>
        </article>

        </div>
    </div>

    <div class="w-full text-center mt-6">
        <a href="/browse" class="browse-viewmore">View More</a>
    </div>
    </section>


    <!-- Create Section -->
    <section class="create-section">
    <div class="create-container">
        <h2>Start Creating</h2>
        <p>Quickly draft an open offer or service idea and continue to the full creator page.</p>

        <div class="create-grid">

        <!-- Create Service -->
        <div class="create-card">
            <h3>Create a Service</h3>
            <textarea placeholder="Describe the service you want to offer..." rows="4"></textarea>
            <button>Continue</button>
        </div>

        <!-- Create Open Offer -->
        <div class="create-card">
            <h3>Create an Open Offer</h3>
            <textarea placeholder="Describe what you are looking for..." rows="4"></textarea>
            <button>Continue</button>
        </div>

        </div>
    </div>
    </section>

    <!-- Featured Workflows -->
    <section class="workflows-section">
    <div class="workflows-container">
        <h2>Featured Workflows</h2>
        <p>Explore workflow templates that can guide you in creating a service or responding to an open offer.</p>

        <!-- Workflow Grid -->
        <div class="workflows-grid">

        <!-- Workflow Card -->
        <div class="workflow-card">
            <h3>Wedding Video Production</h3>
            <p><strong>Steps:</strong> Import Footage → Edit Clips → Color Grade → Export</p>
            <div class="workflow-actions">
            <button class="btn-service">Create Service</button>
            <button class="btn-offer">Create Offer</button>
            </div>
        </div>

        <!-- Workflow Card -->
        <div class="workflow-card">
            <h3>House Painting</h3>
            <p><strong>Steps:</strong> Inspect → Prepare Surface → Apply Paint → Finish</p>
            <div class="workflow-actions">
            <button class="btn-service">Create Service</button>
            <button class="btn-offer">Create Offer</button>
            </div>
        </div>

        <!-- Workflow Card -->
        <div class="workflow-card">
            <h3>Birthday Catering</h3>
            <p><strong>Steps:</strong> Menu Planning → Cook → Serve → Clean Up</p>
            <div class="workflow-actions">
            <button class="btn-service">Create Service</button>
            <button class="btn-offer">Create Offer</button>
            </div>
        </div>

        </div>
    </div>
    </section>

</x-app-layout>
----
--resources/views/auth/confirm-password.blade.php
<x-app-layout cssFile="auth.css" title="Confirm Password">
  <section class="form-section">
    <div class="form-card">
      <div class="form-header">
        <div class="form-icon">
          <x-icons.lock class="w-8 h-8 text-green-500" />
        </div>
        <h2 class="form-title">Confirm your password</h2>
        <p class="form-subtitle">For your security, please confirm your password to continue.</p>
      </div>

      <form method="POST" action="{{ route('password.confirm') }}">
        @csrf
        <div class="mb-5">
          <label for="password" class="form-label">Password</label>
          <input id="password" name="password" type="password" class="form-input" required autocomplete="current-password">
          <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <button type="submit" class="form-button">Confirm</button>
      </form>

      <p class="form-footer">
        <a href="{{ route('auth.signin') }}" class="text-green-500 hover:underline font-medium">Back to Sign In</a>
      </p>
    </div>
  </section>
</x-app-layout>
----
--resources/views/auth/forgot-password.blade.php
<x-app-layout title="Forgot Password">
  <section class=" flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
    <div class="my-5 bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100">
      <div class="form-header">
        <div class="form-icon">
          <x-icons.mail class="w-8 h-8 text-green-500" />
        </div>
        <h2 class="form-title">Forgot your password?</h2>
        <p class="form-subtitle">No worries — we’ll send you a reset link.</p>
      </div>

      @if (session('status'))
        <div class="mb-4 text-sm text-green-600 dark:text-green-400">
          {{ session('status') }}
        </div>
      @endif

      <form method="POST" action="{{ route('password.email') }}">
        @csrf
        <div class="mb-5">
          <label for="email" class="form-label">Email address</label>
          <input type="email" id="email" name="email" class="form-input" placeholder="you@email.com" required autofocus>
          <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>
        <button type="submit" class="form-button">Send Reset Link</button>
      </form>

      <p class="form-footer">
        <a href="{{ route('auth.signin') }}" class="text-green-500 hover:underline font-medium">Back to Sign In</a>
      </p>
    </div>
  </section>
</x-app-layout>
----
--resources/views/auth/join.blade.php
<x-app-layout title="Join">
  <section class=" flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
    <div class="my-5 bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100">
      <!-- Header -->
      <div class="form-header">
        <div class="form-icon">
          <x-icons.profile class="w-8 h-8 text-green-500" />
        </div>
        <h2 class="form-title">Create a new account</h2>
        <p class="form-subtitle">Sign up to get started!</p>
      </div>

      <!-- Form -->
      <form method="POST" action="{{ route('auth.join') }}">
        @csrf
        <div class="mb-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <label for="first_name" class="form-label">First Name</label>
            <input type="text" id="first_name" name="first_name" placeholder="First name" required class="form-input">
            <x-input-error :messages="$errors->get('first_name')" class="mt-2" />
          </div>
          <div>
            <label for="last_name" class="form-label">Last Name</label>
            <input type="text" id="last_name" name="last_name" placeholder="Last name" required class="form-input">
            <x-input-error :messages="$errors->get('last_name')" class="mt-2" />
          </div>
        </div>

        <div class="mb-4">
          <label for="email" class="form-label">Email</label>
          <input type="email" id="email" name="email" placeholder="you@email.com" required class="form-input">
          <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="mb-4">
          <label for="password" class="form-label">Password</label>
          <input type="password" id="password" name="password" placeholder="Create a password" required class="form-input">
          <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="mb-6">
          <label for="password_confirmation" class="form-label">Confirm Password</label>
          <input type="password" id="password_confirmation" name="password_confirmation" placeholder="Confirm your password" required class="form-input">
          <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <button type="submit" class="form-button">Sign Up</button>
      </form>

      <!-- Divider -->
      <div class="form-divider">
        <div class="form-divider-line"></div>
        <span class="form-divider-text">or</span>
        <div class="form-divider-line"></div>
      </div>

      <!-- Google Sign Up -->
      <button class="form-alt-button">
        <img src="https://www.svgrepo.com/show/475656/google-color.svg" alt="Google" class="w-5 h-5">
        <span class="text-gray-700 font-medium">Sign up with Google</span>
      </button>

      <!-- Footer -->
      <p class="form-footer">
        Already have an account?
        <a href="{{ route('auth.signin') }}" class="text-green-500 hover:underline font-medium">Sign In</a>
      </p>
    </div>
  </section>

</x-app-layout>
----
--resources/views/auth/reset-password.blade.php
<x-app-layout title="Reset Password">
  <section class=" flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
    <div class="my-5 bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100">
      <div class="form-header">
        <div class="form-icon">
          <x-icons.lock class="w-8 h-8 text-green-500" />
        </div>
        <h2 class="form-title">Reset your password</h2>
        <p class="form-subtitle">Enter your new password below.</p>
      </div>

      <form method="POST" action="{{ route('password.store') }}">
        @csrf
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <div class="mb-4">
          <label for="email" class="form-label">Email</label>
          <input id="email" name="email" type="email" class="form-input" value="{{ old('email', $request->email) }}" required autofocus>
          <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="mb-4">
          <label for="password" class="form-label">New Password</label>
          <input id="password" name="password" type="password" class="form-input" required>
          <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="mb-6">
          <label for="password_confirmation" class="form-label">Confirm Password</label>
          <input id="password_confirmation" name="password_confirmation" type="password" class="form-input" required>
          <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <button type="submit" class="form-button">Reset Password</button>
      </form>

      <p class="form-footer">
        <a href="{{ route('auth.signin') }}" class="text-green-500 hover:underline font-medium">Back to Sign In</a>
      </p>
    </div>
  </section>
</x-app-layout>
----
--resources/views/auth/signin.blade.php
<x-app-layout title="Sign In" >
    <section class=" flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
        <div class="my-5 bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100">
            <div class="form-header">
            <div class="form-icon">
                <x-icons.profile></x-icons.profile>
            </div>
            <h2 class="form-title">Sign In</h2>
            <p class="form-subtitle">Welcome back! Please login in below.</p>
            </div>

            <form method="POST" action="{{ route('auth.signin') }}">
                @csrf
                <div class="mb-5">
                    <label class="form-label" for="email">Email</label>
                    <input class="form-input" name="email" type="email" id="email" placeholder="you@email.com" required>
                    <x-input-error :messages="$errors->get('email')" class="mt-2" />
                </div>
                <div class="mb-4">
                    <label class="form-label" for="password">Password</label>
                    <input class="form-input" name="password" type="password" id="password" placeholder="Enter your password" required  autocomplete="current-password" >
                    <x-input-error :messages="$errors->get('password')" class="mt-2" />
                </div>

                <div class="flex items-center justify-between mb-6">
                    <label class="flex items-center text-sm text-gray-600">
                    <input type="checkbox" class="mr-2 accent-green-500"> Remember me
                    </label>
                    <a href="{{ route('password.request') }}" class="text-green-500 hover:underline text-sm">Forgot password?</a>
                </div>

                <button type="submit" class="form-button">Sign In</button>
            </form>

            <div class="form-divider">
            <div class="form-divider-line"></div>
            <span class="form-divider-text">or</span>
            <div class="form-divider-line"></div>
            </div>

            <button class="form-alt-button">
            <img src="https://www.svgrepo.com/show/475656/google-color.svg" alt="Google" class="w-5 h-5">
            <span class="text-gray-700 font-medium">Sign in with Google</span>
            </button>

            <p class="form-footer">
            Don't have an account?
            <a href="{{route('auth.join')}}" class="text-green-500 hover:underline font-medium">Sign Up</a>
            </p>
        </div>
    </section>
</x-app-layout>
----
--resources/views/auth/verify-email.blade.php
<x-app-layout title="Verify Email">
  <section class=" flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
    <div class="my-5 bg-white shadow-2xl rounded-3xl p-10 w-full max-w-md border border-gray-100">
      <div class="form-header">
        <div class="form-icon">
          <x-icons.mail-check class="w-8 h-8 text-green-500" />
        </div>
        <h2 class="form-title">Verify your email</h2>
        <p class="form-subtitle">Before continuing, please check your inbox for a verification link.</p>
      </div>

      @if (session('status') == 'verification-link-sent')
        <div class="mb-4 text-sm text-green-600 dark:text-green-400">
          A new verification link has been sent to your email address.
        </div>
      @endif

      <div class="flex flex-col gap-3">
        <form method="POST" action="{{ route('verification.send') }}">
          @csrf
          <button type="submit" class="form-button w-full">Resend Verification Email</button>
        </form>

        <form method="POST" action="{{ route('logout') }}">
          @csrf
          <button type="submit" class="form-alt-button text-gray-700 font-medium">Log Out</button>
        </form>
      </div>
    </div>
  </section>
</x-app-layout>
----
--resources/views/components/application-logo.blade.php
@props(['align' => 'left'])

<div class="flex items-center {{ $align === 'center' ? 'justify-center' : 'justify-start' }}">
    <a href="{{ route('home') }}" class="text-2xl font-bold hover:opacity-50 transition-opacity">
        <span class="text-text dark:text-text-secondary">Serbizyu</span><span class="text-brand">.</span>
    </a>
</div>
----
--resources/views/components/auth-session-status.blade.php
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'status-message status-success']) }}>
        {{ $status }}
    </div>
@endif
----
--resources/views/components/danger-button.blade.php
@props(['disabled' => false])

<button {{ $attributes->merge(['type' => 'submit', 'class' => 'btn btn-danger', 'disabled' => $disabled]) }}>
    {{ $slot }}
</button>
----
--resources/views/components/dropdown-link.blade.php
@props(['active' => false])

<a {{ $attributes->merge(['class' => "dropdown-link {{ $active ? 'dropdown-active' : 'dropdown-inactive' }}"]) }}>
    {{ $slot }}
</a>
----
--resources/views/components/dropdown.blade.php
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-background dark:bg-secondary-dark'])

@php
$alignmentClasses = match ($align) {
    'left' => 'ltr:origin-top-left rtl:origin-top-right start-0',
    'top' => 'origin-top',
    default => 'ltr:origin-top-right rtl:origin-top-left end-0',
};

$width = match ($width) {
    '48' => 'w-48',
    default => $width,
};
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-modal mt-2 {{ $width }} rounded-md shadow-md {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-secondary-dark ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>
----
--resources/views/components/form.blade.php
@props(['align' => 'center', 'maxWidth' => 'md'])

@php
$alignment = match ($align) {
    'left' => 'form-wrapper-left',
    'right' => 'form-wrapper-right',
    default => 'form-wrapper-centered',
};

$maxW = match ($maxWidth) {
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    default => 'sm:max-w-md',
};
@endphp

<div class="form-wrapper {{ $alignment }}">
    <div class="form-container {{ $maxW }}">
        {{ $header ?? '' }}
        <form class="space-y-2">
            {{ $slot }}
        </form>
        {{ $footer ?? '' }}
    </div>
</div>
----
--resources/views/components/input-error.blade.php
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'form-error']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif
----
--resources/views/components/input-label.blade.php
@props(['value'])

<label {{ $attributes->merge(['class' => 'form-label']) }}>
    {{ $value ?? $slot }}
</label>
----
--resources/views/components/modal.blade.php
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="modal-overlay"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="modal-enter"
        x-transition:enter-start="modal-enter-start"
        x-transition:enter-end="modal-enter-end"
        x-transition:leave="modal-leave"
        x-transition:leave-start="modal-leave-start"
        x-transition:leave-end="modal-leave-end"
    >
        <div class="modal-backdrop"></div>
    </div>

    <div
        x-show="show"
        class="modal-content {{ $maxWidth }}"
        x-transition:enter="modal-enter"
        x-transition:enter-start="modal-enter-start"
        x-transition:enter-end="modal-enter-end"
        x-transition:leave="modal-leave"
        x-transition:leave-start="modal-leave-start"
        x-transition:leave-end="modal-leave-end"
    >
        {{ $slot }}
    </div>
</div>
----
--resources/views/components/outline-button.blade.php
@props(['disabled' => false])

<button {{ $attributes->merge(['type' => 'button', 'class' => 'btn btn-outline-white', 'disabled' => $disabled]) }}>
    {{ $slot }}
</button>
----
--resources/views/components/primary-button.blade.php
@props(['disabled' => false])

<button {{ $attributes->merge(['type' => 'submit', 'class' => 'btn btn-primary ms-4', 'disabled' => $disabled]) }}>
    {{ $slot }}
</button>
----
--resources/views/components/secondary-button.blade.php
@props(['disabled' => false])

<button {{ $attributes->merge(['type' => 'button', 'class' => 'btn btn-secondary', 'disabled' => $disabled]) }}>
    {{ $slot }}
</button>
----
--resources/views/components/text-input.blade.php
@props(['disabled' => false])

<input @disabled($disabled) {{ $attributes->merge(['class' => 'form-input']) }}>
----
--resources/views/components/icons/filter.blade.php
<svg xmlns="http://www.w3.org/2000/svg" 
     {{ $attributes->merge(['class' => 'w-6 h-6']) }} 
     fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.8">
  <path stroke-linecap="round" stroke-linejoin="round" 
        d="M3 4h18M4 9h16M6 14h12M10 19h4" />
</svg>
----
--resources/views/components/icons/lock.blade.php
<svg xmlns="http://www.w3.org/2000/svg"
     {{ $attributes->merge(['class' => 'w-10 h-10']) }}
     viewBox="0 0 24 24"
     fill="currentColor">
  <path fill-rule="evenodd" 
        d="M12 1.5a5.25 5.25 0 00-5.25 5.25v3H5.25A2.25 2.25 0 003 12v7.5A2.25 2.25 0 005.25 21.75h13.5A2.25 2.25 0 0021 19.5V12a2.25 2.25 0 00-2.25-2.25H17.25v-3A5.25 5.25 0 0012 1.5zM9.75 6.75a2.25 2.25 0 114.5 0v3h-4.5v-3z" 
        clip-rule="evenodd" />
</svg>
----
--resources/views/components/icons/mail-check.blade.php
<svg xmlns="http://www.w3.org/2000/svg"
     {{ $attributes->merge(['class' => 'w-10 h-10']) }}
     viewBox="0 0 24 24"
     fill="currentColor">
  <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5A2.25 2.25 0 0122.5 6.75v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zM3.75 6l7.815 6.187a.75.75 0 00.87 0L20.25 6H3.75zm9.03 6.97l3.22 3.22a.75.75 0 001.06-1.06l-3.72-3.72a.75.75 0 00-1.06 0l-1.97 1.97a.75.75 0 101.06 1.06l1.41-1.41z" />
</svg>
----
--resources/views/components/icons/mail.blade.php
<svg xmlns="http://www.w3.org/2000/svg"
     {{ $attributes->merge(['class' => 'w-10 h-10']) }}
     viewBox="0 0 24 24"
     fill="currentColor">
  <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5A2.25 2.25 0 0122.5 6.75v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zM3.75 6l7.815 6.187a.75.75 0 00.87 0L20.25 6H3.75z" />
</svg>
----
--resources/views/components/icons/profile.blade.php
<svg class="w-8 h-8 text-green-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
  <circle cx="12" cy="8" r="4" stroke-linecap="round" stroke-linejoin="round"/>
  <path stroke-linecap="round" stroke-linejoin="round" d="M4 21c0-4 4-7 8-7s8 3 8 7"/>
</svg>
----
--resources/views/components/icons/search.blade.php
<svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10"viewBox="0 0 20 20" fill="currentColor">
    <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l4.387 4.387a1 1 0 01-1.414 1.414l-4.387-4.387zM8 14a6 6 0 100-12 6 6 0 000 12z" clip-rule="evenodd"/>
</svg>
----
--resources/views/components/listings/openoffer.blade.php

----
--resources/views/components/listings/service.blade.php
<?php 
  /**
   * Service Card Component
   * 
   * @props ['service'] - Service model instance with relationships loaded
   * Expected relationships: category, creator, workflow, address
   */
  
  // Format price with peso sign
  $formattedPrice = "₱" . number_format($service->price ?? 0, 2);
  
  // Get pay_first label
  $paymentType = $service->pay_first ? 'Pay First' : 'Pay After';
  
  // Get workflow steps (shortened for display) order them by workTemplate->order_index
    $workflowSteps = '';
    if ($service->workflowTemplate && $service->workflowTemplate->workTemplates) {
        $steps = $service->workflowTemplate->workTemplates
            ->sortBy('order_index')
            ->pluck('title')
            ->toArray();
        $workflowSteps = implode(' → ', $steps);
    }
  
  // Get location from address
  $location = $service->address ? 
    ($service->address->city ?? '') . ($service->address->province ? ', ' . $service->address->province : '') : 
    'Location not specified';
  
  // Get creator info
  $creatorName = $service->creator->name ?? 'Unknown';
  $creatorInitial = strtoupper(substr($creatorName, 0, 1)); // initials for now
  
  // Placeholder rating (you'll want to implement actual ratings later)
  $rating = '★★★★☆';
?>

<article class="listing-card">
    <div class="card-top">
        <span class="badge-service">Service</span>
        <span class="rating">{{ $rating }}</span>
    </div>
    
    <h3 class="card-title">{{ $service->title }}</h3>
    
    <p class="card-desc">{{ Str::limit($service->description, 80) }}</p>
    
    @if($service->workflow)
        <p class="card-desc text-xs italic">{{ $workflowSteps }}</p>
    @endif
    
    <p class="card-meta">Price: {{ $formattedPrice }}{{ $service->pay_first ? '/hr' : '' }}</p>
    
    <p class="card-meta">📍 {{ $location }}</p>
    
    @if($service->category)
        <p class="card-meta text-xs">
            <span class="text-gray-400">Category:</span> {{ $service->category->name }}
        </p>
    @endif
    
    <div class="card-footer">
        <span class="text-xs text-text-secondary">
            {{ $paymentType }} • {{ $service->created_at->diffForHumans() }}
        </span>
        <div class="card-avatar" title="{{ $creatorName }}">
            {{ $creatorInitial }}
        </div>
    </div>
</article>
----
--resources/views/components/nav/profile-dropdown.blade.php
@props(['authProfileData'])

<div x-data="{ open: false }" class="relative">
  {{-- Desktop trigger + dropdown (visible on md and up) --}}
  <div class="hidden md:flex items-center">
    <button @click="open = !open" class="navbar-profile-trigger" aria-expanded="false">
      @if($authProfileData && $authProfileData['img_path'])
        <img src="{{ asset($authProfileData['img_path']) }}" alt="Profile" class="navbar-profile-img" />
      @else
          <div class="bg-brand-100">
            <x-icons.profile class="w-8 h-8 text-green-500" />
        </div>
      @endif
    </button>

    {{-- dropdown (desktop) --}}
    <div 
      x-show="open" 
      @click.away="open = false"
      x-cloak
      x-transition
      class="navbar-profile-dropdown"
      style="display: none;"
    >
      <div class="px-4 py-2 border-b">
        <span class="font-semibold text-sm">{{ $authProfileData['greeting'] ?? 'Hi, User!' }}</span>
        @if($authProfileData['email'])
          <div class="text-xs text-text-secondary truncate">{{ $authProfileData['email'] }}</div>
        @endif
      </div>

      <a href="{{ route('profile.edit') }}" class="navbar-profile-item">Profile</a>
      <a href="{{ route('creator.dashboard') }}" class="navbar-profile-item">Creator Space</a>

      <form method="POST" action="{{ route('logout') }}">
        @csrf
        <button type="submit" class="navbar-profile-item w-full text-left">Logout</button>
      </form>
    </div>
  </div>

  {{-- Mobile stacked UI (visible under md) --}}
  <div class="md:hidden">
    <div class="flex flex-col items-center space-y-3">
      {{-- profile icon --}}
      <div>
        @if($authProfileData && $authProfileData['img_path'])
          <img src="{{ asset($authProfileData['img_path']) }}" alt="Profile" class="navbar-profile-img" />
        @else
            <a class="p-5 bg-brand-100" href="{{ route('profile.edit') }}" class="w-full">
                <x-icons.profile class="w-6 h-6 text-green-500" />
            </a>
        @endif
      </div>

    

      <a href="{{ route('creator.dashboard') }}" class="w-full">
        <button class="navbar-creator-btn w-full">Creator Space</button>
      </a>

      <form method="POST" action="{{ route('logout') }}" class="w-full">
        @csrf
        <button type="submit" class="navbar-mobile-button w-full">Logout</button>
      </form>
    </div>
  </div>
</div>
----
--resources/views/layouts/app.blade.php
@props([
    'title' => config('app.name', 'Serbizyu'),
    'cssFiles' => [],   // accepts array or string
    'jsFiles' => [],    // accepts array or string
])

@php
    // Backward compatibility (if someone passes single string)
    $cssFiles = is_array($cssFiles) ? $cssFiles : [$cssFiles];
    $jsFiles = is_array($jsFiles) ? $jsFiles : [$jsFiles];

    // Default to app.css / app.js if none provided
    if (empty($cssFiles)) $cssFiles = ['app.css'];
    if (empty($jsFiles)) $jsFiles = ['app.js'];
@endphp

<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ $title }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=poppins:400,500,600|inter:400,500,600&display=swap" rel="stylesheet" />

    <!-- Styles & Scripts -->
    @foreach ($cssFiles as $css)
        @vite("resources/css/{$css}")
    @endforeach

    @foreach ($jsFiles as $js)
        @vite("resources/js/{$js}")
    @endforeach
</head>

<body>
    <div class="min-h-screen">
        <x-navbar />

        @isset($header)
            <header class="shadow" style="background-color: var(--color-background);">
                <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
                    {{ $header }}
                </div>
            </header>
        @endisset

        <main>
            {{ $slot }}
        </main>

        @include('layouts.footer')
    </div>
</body>
</html>
----
--resources/views/layouts/footer.blade.php
<footer class="mt-[--spacing-3]" style="background-color: var(--color-background); border-top: 1px solid var(--color-secondary-dark);">
    <div class="max-w-7xl mx-auto px-[--spacing-3] py-[--spacing-3] flex flex-col md:flex-row justify-between items-center">
        <div class="text-lg font-bold text-[--color-text] mb-[--spacing-2] md:mb-0" style="font-family: var(--font-display);">
            Serbizyu<span style="color: var(--color-primary);">.</span>
        </div>
        <div class="flex space-x-[--spacing-3] text-[--color-text-secondary] mb-[--spacing-2] md:mb-0">
            {{-- <x-nav-link href="{{ route('about') }}">About</x-nav-link> --}}
            {{-- <x-nav-link href="{{ route('categories') }}">Categories</x-nav-link> --}}
        </div>
        <div class="text-[--color-text-secondary]" style="font-size: 0.875rem;">&copy; {{ date('Y') }} Serbizyu. All rights reserved.</div>
    </div>
</footer>
----
--resources/views/layouts/navbar.blade.php
@props([
  'navItems' => [
    ['label' => 'Home', 'route' => 'home'],
    ['label' => 'Browse', 'route' => 'browse'],
    ['label' => 'FAQ', 'route' => 'faq'],
    ['label' => 'About', 'route' => 'about']
  ]
])

<header class="navbar" x-data="{ open: false }">
  <div class="navbar-inner">
    
    <!-- Brand -->
    <a href="{{ route('home') }}" class="navbar-brand">
      <span class="navbar-brand-text">Serbizyu</span>
      <span class="navbar-brand-accent">.</span>
    </a>

    <!-- Desktop Nav -->
    <nav class="navbar-nav">
      @foreach($navItems as $item)
        @php $route = $item['route']; @endphp
        <a 
          href="{{ $route ? route($route) : '#' }}" 
          class="navbar-link {{ request()->routeIs($route) ? 'active' : '' }}"
        >
          {{ $item['label'] }}
        </a>
      @endforeach

      {{-- show only when on auth check else show profile bar with logout button --}}
      <div class="navbar-auth">
        @guest
            <a href="{{ route('auth.signin') }}" 
              class="navbar-auth-link {{ request()->routeIs('auth.signin') ? 'active' : '' }}">
                Sign In
            </a>
            <a href="{{ route('auth.join') }}">
                <button class="navbar-auth-button">Join</button>
            </a>
        @endguest

       @auth
            <x-nav.profile-dropdown :authProfileData="$authProfileData" />
        @endauth


      </div>
    </nav>

    <!-- Mobile Hamburger -->
    <button @click="open = !open" class="navbar-toggle text-2xl">
      <span x-show="!open">☰</span>
      <span x-show="open">✕</span>
    </button>
  </div>

  <!-- Mobile Menu -->
  <div
    x-show="open"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0 -translate-y-full"
    x-transition:enter-end="opacity-100 translate-y-0"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100 translate-y-0"
    x-transition:leave-end="opacity-0 -translate-y-full"
    class="navbar-mobile"
  >
    <nav class="flex flex-col space-y-2">
      @foreach($navItems as $item)
        @php $route = $item['route']; @endphp
        <a 
          href="{{ $route ? route($route) : '#' }}" 
          class="navbar-mobile-link {{ request()->routeIs($route) ? 'active' : '' }}"
        >
          {{ $item['label'] }}
        </a>
      @endforeach

      <div class="navbar-mobile-auth">
        @guest
            <a href="{{ route('auth.signin') }}" 
              class="block text-center navbar-mobile-link {{ request()->routeIs('auth.signin') ? 'active' : '' }}">
                Sign In
            </a>
            <a href="{{ route('auth.join') }}">
                <button class="navbar-mobile-button">Join</button>
            </a>
        @endguest

       @auth
          <x-nav.profile-dropdown :authProfileData="$authProfileData"/>
      @endauth
      </div>
    </nav>
  </div>
</header>
----
--resources/views/profile/edit.blade.php
<x-app-layout title="Account Settings">
  <section class="p-4 flex items-center justify-center min-h-screen bg-gradient-to-br from-green-100 via-white to-gray-100">
    <div class="w-full max-w-5xl mx-auto px-4 md:px-0">
      <h2 class="pt-4 text-2xl font-bold text-center mb-10 text-gray-800">Account Settings</h2>

      <div class="flex flex-col md:flex-row gap-8 items-start">
        {{-- Profile Information --}}
        <div class="w-full md:flex-1">
          @include('profile.partials.update-profile-information-form')
        </div>

        {{-- Update Password --}}
        <div class="w-full md:flex-1">
          @include('profile.partials.update-password-form')
        </div>
      </div>

      {{-- Delete Account --}}
      <div class="mt-10">
        @include('profile.partials.delete-user-form')
      </div>
    </div>
  </section>
</x-app-layout>
----
--resources/views/profile/partials/delete-user-form.blade.php
<div class="card bg-white border border-gray-200 rounded-2xl shadow p-8 flex flex-col">
  <h2 class="text-lg font-semibold mb-3 text-gray-800">Delete Account</h2>
  <p class="text-sm text-gray-500 mb-6 leading-relaxed">
    Once your account is deleted, all of its data will be permanently removed. Please confirm your password before continuing.
  </p>

  <form method="POST" action="{{ route('profile.destroy') }}" class="flex flex-col flex-1">
    @csrf
    @method('delete')

    <div class="flex-1 space-y-4">
      <div>
        <label for="password" class="form-label">Password</label>
        <input id="password" name="password" type="password" class="form-input" placeholder="Enter your password" required>
        @error('password')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
      </div>
    </div>

    <div class="flex justify-end mt-6">
      <button type="submit" class="btn btn-danger px-6 py-2">Delete Account</button>
    </div>
  </form>
</div>
----
--resources/views/profile/partials/update-password-form.blade.php
<div class="card bg-white border border-gray-200 rounded-2xl shadow p-8 flex flex-col">
  <h2 class="text-lg font-semibold mb-4 text-gray-800">Update Password</h2>
  <p class="text-sm text-gray-500 mb-6">Keep your account secure by setting a strong password.</p>

  <form method="POST" action="{{ route('password.update') }}" class="flex flex-col flex-1">
    @csrf
    @method('put')

    <div class="flex-1 space-y-4">
      <div>
        <label for="current_password" class="form-label">Current Password</label>
        <input id="current_password" name="current_password" type="password" class="form-input" autocomplete="current-password">
        @error('current_password', 'updatePassword')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
      </div>

      <div>
        <label for="password" class="form-label">New Password</label>
        <input id="password" name="password" type="password" class="form-input" autocomplete="new-password">
        @error('password', 'updatePassword')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
      </div>

      <div>
        <label for="password_confirmation" class="form-label">Confirm New Password</label>
        <input id="password_confirmation" name="password_confirmation" type="password" class="form-input" autocomplete="new-password">
        @error('password_confirmation', 'updatePassword')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
      </div>
    </div>

    <div class="flex justify-end mt-6">
      <button type="submit" class="btn btn-primary px-6 py-2">Update Password</button>
    </div>
  </form>
</div>
----
--resources/views/profile/partials/update-profile-information-form.blade.php
<div class="card bg-white border border-gray-200 rounded-2xl shadow p-8">
  <h2 class="text-lg font-semibold mb-4 text-gray-800">Profile Information</h2>

  <form method="POST" action="{{ route('profile.update') }}" enctype="multipart/form-data" class="space-y-4">
    @csrf
    @method('patch')

    {{-- first name and last name --}}
    <div>
        <label for="firstname" class="form-label">First Name</label>
        <input id="firstname" name="firstname" type="text" class="form-input" value="{{ old('firstname', $user->firstname) }}" required autofocus>
        @error('firstname')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
    </div>
    <div>
        <label for="lastname" class="form-label">Last Name</label>
        <input id="lastname" name="lastname" type="text" class="form-input" value="{{ old('lastname', $user->lastname) }}" required>
        @error('lastname')
          <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
        @enderror
    </div>

    <div>
      <label for="email" class="form-label">Email</label>
      <input id="email" name="email" type="email" class="form-input" value="{{ old('email', $user->email) }}" required>
      @error('email')
        <p class="text-red-600 text-sm mt-1">{{ $message }}</p>
      @enderror
    </div>

    <div class="flex justify-end pt-2">
      <button type="submit" class="btn btn-primary px-6 py-2">Save Changes</button>
    </div>
  </form>
</div>
----
--routes/auth.php
<?php

use App\Domains\Users\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Domains\Users\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Domains\Users\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Domains\Users\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Domains\Users\Http\Controllers\Auth\NewPasswordController;
use App\Domains\Users\Http\Controllers\Auth\PasswordController;
use App\Domains\Users\Http\Controllers\Auth\PasswordResetLinkController;
use App\Domains\Users\Http\Controllers\Auth\RegisteredUserController;
use App\Domains\Users\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('join', [RegisteredUserController::class, 'create'])
        ->name('auth.join');

    Route::post('join', [RegisteredUserController::class, 'store']);

    Route::get('signin', [AuthenticatedSessionController::class, 'create'])
        ->name('auth.signin');

    Route::post('signin', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});
----
--routes/console.php
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');
----
--routes/web.php
<?php
use Illuminate\Support\Facades\Route;
use App\Domains\Users\Http\Controllers\ProfileController;
// Authentication routes
require __DIR__.'/auth.php';

// Home and static pages
    Route::get('/', function () {
        return view('home');
    })->name('home');

    Route::get('browse', function () {
        return view('browse');
    })->name('browse');

    Route::get('create', function () {
        return view('create');
    })->name('create');

    Route::get('about', function () {
        return view('about');
    })->name('about');

    Route::get('faq', function () {
        return view('faq');
    })->name('faq');

// Creator space
   Route::middleware(['auth'])->prefix('creator')->group(function () {
       Route::get('/', function () {
           return view('home');
       })->name('creator.dashboard');
   });
// Profile editor
   Route::middleware(['auth'])->prefix('profile')->group(function () {
    Route::get('/', [ProfileController::class, 'edit'])
        ->name('profile.edit');

    Route::patch('/', [ProfileController::class, 'update'])
        ->name('profile.update');

    Route::delete('/', [ProfileController::class, 'destroy'])
        ->name('profile.destroy');
});
----
--SUMMARY
Text:127 Binary:2 Skipped:0
